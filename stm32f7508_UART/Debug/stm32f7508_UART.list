
stm32f7508_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029dc  900001c8  900001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  90002ba4  90002ba4  00012ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  90002bd0  90002bd0  00012bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  90002bd8  90002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  90002bdc  90002bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  90002be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000a4  2000000c  90002bec  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  200000b0  90002bec  000200b0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007f5d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000015ed  00000000  00000000  00027f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000006f0  00000000  00000000  00029588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000658  00000000  00000000  00029c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00029209  00000000  00000000  0002a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00008fdc  00000000  00000000  000534d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f57df  00000000  00000000  0005c4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00151c94  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001a88  00000000  00000000  00151ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900001c8 <__do_global_dtors_aux>:
900001c8:	b510      	push	{r4, lr}
900001ca:	4c05      	ldr	r4, [pc, #20]	; (900001e0 <__do_global_dtors_aux+0x18>)
900001cc:	7823      	ldrb	r3, [r4, #0]
900001ce:	b933      	cbnz	r3, 900001de <__do_global_dtors_aux+0x16>
900001d0:	4b04      	ldr	r3, [pc, #16]	; (900001e4 <__do_global_dtors_aux+0x1c>)
900001d2:	b113      	cbz	r3, 900001da <__do_global_dtors_aux+0x12>
900001d4:	4804      	ldr	r0, [pc, #16]	; (900001e8 <__do_global_dtors_aux+0x20>)
900001d6:	f3af 8000 	nop.w
900001da:	2301      	movs	r3, #1
900001dc:	7023      	strb	r3, [r4, #0]
900001de:	bd10      	pop	{r4, pc}
900001e0:	2000000c 	.word	0x2000000c
900001e4:	00000000 	.word	0x00000000
900001e8:	90002b8c 	.word	0x90002b8c

900001ec <frame_dummy>:
900001ec:	b508      	push	{r3, lr}
900001ee:	4b03      	ldr	r3, [pc, #12]	; (900001fc <frame_dummy+0x10>)
900001f0:	b11b      	cbz	r3, 900001fa <frame_dummy+0xe>
900001f2:	4903      	ldr	r1, [pc, #12]	; (90000200 <frame_dummy+0x14>)
900001f4:	4803      	ldr	r0, [pc, #12]	; (90000204 <frame_dummy+0x18>)
900001f6:	f3af 8000 	nop.w
900001fa:	bd08      	pop	{r3, pc}
900001fc:	00000000 	.word	0x00000000
90000200:	20000010 	.word	0x20000010
90000204:	90002b8c 	.word	0x90002b8c

90000208 <__aeabi_uldivmod>:
90000208:	b953      	cbnz	r3, 90000220 <__aeabi_uldivmod+0x18>
9000020a:	b94a      	cbnz	r2, 90000220 <__aeabi_uldivmod+0x18>
9000020c:	2900      	cmp	r1, #0
9000020e:	bf08      	it	eq
90000210:	2800      	cmpeq	r0, #0
90000212:	bf1c      	itt	ne
90000214:	f04f 31ff 	movne.w	r1, #4294967295
90000218:	f04f 30ff 	movne.w	r0, #4294967295
9000021c:	f000 b96e 	b.w	900004fc <__aeabi_idiv0>
90000220:	f1ad 0c08 	sub.w	ip, sp, #8
90000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
90000228:	f000 f806 	bl	90000238 <__udivmoddi4>
9000022c:	f8dd e004 	ldr.w	lr, [sp, #4]
90000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
90000234:	b004      	add	sp, #16
90000236:	4770      	bx	lr

90000238 <__udivmoddi4>:
90000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000023c:	9d08      	ldr	r5, [sp, #32]
9000023e:	4604      	mov	r4, r0
90000240:	468c      	mov	ip, r1
90000242:	2b00      	cmp	r3, #0
90000244:	f040 8083 	bne.w	9000034e <__udivmoddi4+0x116>
90000248:	428a      	cmp	r2, r1
9000024a:	4617      	mov	r7, r2
9000024c:	d947      	bls.n	900002de <__udivmoddi4+0xa6>
9000024e:	fab2 f282 	clz	r2, r2
90000252:	b142      	cbz	r2, 90000266 <__udivmoddi4+0x2e>
90000254:	f1c2 0020 	rsb	r0, r2, #32
90000258:	fa24 f000 	lsr.w	r0, r4, r0
9000025c:	4091      	lsls	r1, r2
9000025e:	4097      	lsls	r7, r2
90000260:	ea40 0c01 	orr.w	ip, r0, r1
90000264:	4094      	lsls	r4, r2
90000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
9000026a:	0c23      	lsrs	r3, r4, #16
9000026c:	fbbc f6f8 	udiv	r6, ip, r8
90000270:	fa1f fe87 	uxth.w	lr, r7
90000274:	fb08 c116 	mls	r1, r8, r6, ip
90000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000027c:	fb06 f10e 	mul.w	r1, r6, lr
90000280:	4299      	cmp	r1, r3
90000282:	d909      	bls.n	90000298 <__udivmoddi4+0x60>
90000284:	18fb      	adds	r3, r7, r3
90000286:	f106 30ff 	add.w	r0, r6, #4294967295
9000028a:	f080 8119 	bcs.w	900004c0 <__udivmoddi4+0x288>
9000028e:	4299      	cmp	r1, r3
90000290:	f240 8116 	bls.w	900004c0 <__udivmoddi4+0x288>
90000294:	3e02      	subs	r6, #2
90000296:	443b      	add	r3, r7
90000298:	1a5b      	subs	r3, r3, r1
9000029a:	b2a4      	uxth	r4, r4
9000029c:	fbb3 f0f8 	udiv	r0, r3, r8
900002a0:	fb08 3310 	mls	r3, r8, r0, r3
900002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
900002a8:	fb00 fe0e 	mul.w	lr, r0, lr
900002ac:	45a6      	cmp	lr, r4
900002ae:	d909      	bls.n	900002c4 <__udivmoddi4+0x8c>
900002b0:	193c      	adds	r4, r7, r4
900002b2:	f100 33ff 	add.w	r3, r0, #4294967295
900002b6:	f080 8105 	bcs.w	900004c4 <__udivmoddi4+0x28c>
900002ba:	45a6      	cmp	lr, r4
900002bc:	f240 8102 	bls.w	900004c4 <__udivmoddi4+0x28c>
900002c0:	3802      	subs	r0, #2
900002c2:	443c      	add	r4, r7
900002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
900002c8:	eba4 040e 	sub.w	r4, r4, lr
900002cc:	2600      	movs	r6, #0
900002ce:	b11d      	cbz	r5, 900002d8 <__udivmoddi4+0xa0>
900002d0:	40d4      	lsrs	r4, r2
900002d2:	2300      	movs	r3, #0
900002d4:	e9c5 4300 	strd	r4, r3, [r5]
900002d8:	4631      	mov	r1, r6
900002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900002de:	b902      	cbnz	r2, 900002e2 <__udivmoddi4+0xaa>
900002e0:	deff      	udf	#255	; 0xff
900002e2:	fab2 f282 	clz	r2, r2
900002e6:	2a00      	cmp	r2, #0
900002e8:	d150      	bne.n	9000038c <__udivmoddi4+0x154>
900002ea:	1bcb      	subs	r3, r1, r7
900002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
900002f0:	fa1f f887 	uxth.w	r8, r7
900002f4:	2601      	movs	r6, #1
900002f6:	fbb3 fcfe 	udiv	ip, r3, lr
900002fa:	0c21      	lsrs	r1, r4, #16
900002fc:	fb0e 331c 	mls	r3, lr, ip, r3
90000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000304:	fb08 f30c 	mul.w	r3, r8, ip
90000308:	428b      	cmp	r3, r1
9000030a:	d907      	bls.n	9000031c <__udivmoddi4+0xe4>
9000030c:	1879      	adds	r1, r7, r1
9000030e:	f10c 30ff 	add.w	r0, ip, #4294967295
90000312:	d202      	bcs.n	9000031a <__udivmoddi4+0xe2>
90000314:	428b      	cmp	r3, r1
90000316:	f200 80e9 	bhi.w	900004ec <__udivmoddi4+0x2b4>
9000031a:	4684      	mov	ip, r0
9000031c:	1ac9      	subs	r1, r1, r3
9000031e:	b2a3      	uxth	r3, r4
90000320:	fbb1 f0fe 	udiv	r0, r1, lr
90000324:	fb0e 1110 	mls	r1, lr, r0, r1
90000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
9000032c:	fb08 f800 	mul.w	r8, r8, r0
90000330:	45a0      	cmp	r8, r4
90000332:	d907      	bls.n	90000344 <__udivmoddi4+0x10c>
90000334:	193c      	adds	r4, r7, r4
90000336:	f100 33ff 	add.w	r3, r0, #4294967295
9000033a:	d202      	bcs.n	90000342 <__udivmoddi4+0x10a>
9000033c:	45a0      	cmp	r8, r4
9000033e:	f200 80d9 	bhi.w	900004f4 <__udivmoddi4+0x2bc>
90000342:	4618      	mov	r0, r3
90000344:	eba4 0408 	sub.w	r4, r4, r8
90000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
9000034c:	e7bf      	b.n	900002ce <__udivmoddi4+0x96>
9000034e:	428b      	cmp	r3, r1
90000350:	d909      	bls.n	90000366 <__udivmoddi4+0x12e>
90000352:	2d00      	cmp	r5, #0
90000354:	f000 80b1 	beq.w	900004ba <__udivmoddi4+0x282>
90000358:	2600      	movs	r6, #0
9000035a:	e9c5 0100 	strd	r0, r1, [r5]
9000035e:	4630      	mov	r0, r6
90000360:	4631      	mov	r1, r6
90000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000366:	fab3 f683 	clz	r6, r3
9000036a:	2e00      	cmp	r6, #0
9000036c:	d14a      	bne.n	90000404 <__udivmoddi4+0x1cc>
9000036e:	428b      	cmp	r3, r1
90000370:	d302      	bcc.n	90000378 <__udivmoddi4+0x140>
90000372:	4282      	cmp	r2, r0
90000374:	f200 80b8 	bhi.w	900004e8 <__udivmoddi4+0x2b0>
90000378:	1a84      	subs	r4, r0, r2
9000037a:	eb61 0103 	sbc.w	r1, r1, r3
9000037e:	2001      	movs	r0, #1
90000380:	468c      	mov	ip, r1
90000382:	2d00      	cmp	r5, #0
90000384:	d0a8      	beq.n	900002d8 <__udivmoddi4+0xa0>
90000386:	e9c5 4c00 	strd	r4, ip, [r5]
9000038a:	e7a5      	b.n	900002d8 <__udivmoddi4+0xa0>
9000038c:	f1c2 0320 	rsb	r3, r2, #32
90000390:	fa20 f603 	lsr.w	r6, r0, r3
90000394:	4097      	lsls	r7, r2
90000396:	fa01 f002 	lsl.w	r0, r1, r2
9000039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
9000039e:	40d9      	lsrs	r1, r3
900003a0:	4330      	orrs	r0, r6
900003a2:	0c03      	lsrs	r3, r0, #16
900003a4:	fbb1 f6fe 	udiv	r6, r1, lr
900003a8:	fa1f f887 	uxth.w	r8, r7
900003ac:	fb0e 1116 	mls	r1, lr, r6, r1
900003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
900003b4:	fb06 f108 	mul.w	r1, r6, r8
900003b8:	4299      	cmp	r1, r3
900003ba:	fa04 f402 	lsl.w	r4, r4, r2
900003be:	d909      	bls.n	900003d4 <__udivmoddi4+0x19c>
900003c0:	18fb      	adds	r3, r7, r3
900003c2:	f106 3cff 	add.w	ip, r6, #4294967295
900003c6:	f080 808d 	bcs.w	900004e4 <__udivmoddi4+0x2ac>
900003ca:	4299      	cmp	r1, r3
900003cc:	f240 808a 	bls.w	900004e4 <__udivmoddi4+0x2ac>
900003d0:	3e02      	subs	r6, #2
900003d2:	443b      	add	r3, r7
900003d4:	1a5b      	subs	r3, r3, r1
900003d6:	b281      	uxth	r1, r0
900003d8:	fbb3 f0fe 	udiv	r0, r3, lr
900003dc:	fb0e 3310 	mls	r3, lr, r0, r3
900003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
900003e4:	fb00 f308 	mul.w	r3, r0, r8
900003e8:	428b      	cmp	r3, r1
900003ea:	d907      	bls.n	900003fc <__udivmoddi4+0x1c4>
900003ec:	1879      	adds	r1, r7, r1
900003ee:	f100 3cff 	add.w	ip, r0, #4294967295
900003f2:	d273      	bcs.n	900004dc <__udivmoddi4+0x2a4>
900003f4:	428b      	cmp	r3, r1
900003f6:	d971      	bls.n	900004dc <__udivmoddi4+0x2a4>
900003f8:	3802      	subs	r0, #2
900003fa:	4439      	add	r1, r7
900003fc:	1acb      	subs	r3, r1, r3
900003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
90000402:	e778      	b.n	900002f6 <__udivmoddi4+0xbe>
90000404:	f1c6 0c20 	rsb	ip, r6, #32
90000408:	fa03 f406 	lsl.w	r4, r3, r6
9000040c:	fa22 f30c 	lsr.w	r3, r2, ip
90000410:	431c      	orrs	r4, r3
90000412:	fa20 f70c 	lsr.w	r7, r0, ip
90000416:	fa01 f306 	lsl.w	r3, r1, r6
9000041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
9000041e:	fa21 f10c 	lsr.w	r1, r1, ip
90000422:	431f      	orrs	r7, r3
90000424:	0c3b      	lsrs	r3, r7, #16
90000426:	fbb1 f9fe 	udiv	r9, r1, lr
9000042a:	fa1f f884 	uxth.w	r8, r4
9000042e:	fb0e 1119 	mls	r1, lr, r9, r1
90000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
90000436:	fb09 fa08 	mul.w	sl, r9, r8
9000043a:	458a      	cmp	sl, r1
9000043c:	fa02 f206 	lsl.w	r2, r2, r6
90000440:	fa00 f306 	lsl.w	r3, r0, r6
90000444:	d908      	bls.n	90000458 <__udivmoddi4+0x220>
90000446:	1861      	adds	r1, r4, r1
90000448:	f109 30ff 	add.w	r0, r9, #4294967295
9000044c:	d248      	bcs.n	900004e0 <__udivmoddi4+0x2a8>
9000044e:	458a      	cmp	sl, r1
90000450:	d946      	bls.n	900004e0 <__udivmoddi4+0x2a8>
90000452:	f1a9 0902 	sub.w	r9, r9, #2
90000456:	4421      	add	r1, r4
90000458:	eba1 010a 	sub.w	r1, r1, sl
9000045c:	b2bf      	uxth	r7, r7
9000045e:	fbb1 f0fe 	udiv	r0, r1, lr
90000462:	fb0e 1110 	mls	r1, lr, r0, r1
90000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
9000046a:	fb00 f808 	mul.w	r8, r0, r8
9000046e:	45b8      	cmp	r8, r7
90000470:	d907      	bls.n	90000482 <__udivmoddi4+0x24a>
90000472:	19e7      	adds	r7, r4, r7
90000474:	f100 31ff 	add.w	r1, r0, #4294967295
90000478:	d22e      	bcs.n	900004d8 <__udivmoddi4+0x2a0>
9000047a:	45b8      	cmp	r8, r7
9000047c:	d92c      	bls.n	900004d8 <__udivmoddi4+0x2a0>
9000047e:	3802      	subs	r0, #2
90000480:	4427      	add	r7, r4
90000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
90000486:	eba7 0708 	sub.w	r7, r7, r8
9000048a:	fba0 8902 	umull	r8, r9, r0, r2
9000048e:	454f      	cmp	r7, r9
90000490:	46c6      	mov	lr, r8
90000492:	4649      	mov	r1, r9
90000494:	d31a      	bcc.n	900004cc <__udivmoddi4+0x294>
90000496:	d017      	beq.n	900004c8 <__udivmoddi4+0x290>
90000498:	b15d      	cbz	r5, 900004b2 <__udivmoddi4+0x27a>
9000049a:	ebb3 020e 	subs.w	r2, r3, lr
9000049e:	eb67 0701 	sbc.w	r7, r7, r1
900004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
900004a6:	40f2      	lsrs	r2, r6
900004a8:	ea4c 0202 	orr.w	r2, ip, r2
900004ac:	40f7      	lsrs	r7, r6
900004ae:	e9c5 2700 	strd	r2, r7, [r5]
900004b2:	2600      	movs	r6, #0
900004b4:	4631      	mov	r1, r6
900004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900004ba:	462e      	mov	r6, r5
900004bc:	4628      	mov	r0, r5
900004be:	e70b      	b.n	900002d8 <__udivmoddi4+0xa0>
900004c0:	4606      	mov	r6, r0
900004c2:	e6e9      	b.n	90000298 <__udivmoddi4+0x60>
900004c4:	4618      	mov	r0, r3
900004c6:	e6fd      	b.n	900002c4 <__udivmoddi4+0x8c>
900004c8:	4543      	cmp	r3, r8
900004ca:	d2e5      	bcs.n	90000498 <__udivmoddi4+0x260>
900004cc:	ebb8 0e02 	subs.w	lr, r8, r2
900004d0:	eb69 0104 	sbc.w	r1, r9, r4
900004d4:	3801      	subs	r0, #1
900004d6:	e7df      	b.n	90000498 <__udivmoddi4+0x260>
900004d8:	4608      	mov	r0, r1
900004da:	e7d2      	b.n	90000482 <__udivmoddi4+0x24a>
900004dc:	4660      	mov	r0, ip
900004de:	e78d      	b.n	900003fc <__udivmoddi4+0x1c4>
900004e0:	4681      	mov	r9, r0
900004e2:	e7b9      	b.n	90000458 <__udivmoddi4+0x220>
900004e4:	4666      	mov	r6, ip
900004e6:	e775      	b.n	900003d4 <__udivmoddi4+0x19c>
900004e8:	4630      	mov	r0, r6
900004ea:	e74a      	b.n	90000382 <__udivmoddi4+0x14a>
900004ec:	f1ac 0c02 	sub.w	ip, ip, #2
900004f0:	4439      	add	r1, r7
900004f2:	e713      	b.n	9000031c <__udivmoddi4+0xe4>
900004f4:	3802      	subs	r0, #2
900004f6:	443c      	add	r4, r7
900004f8:	e724      	b.n	90000344 <__udivmoddi4+0x10c>
900004fa:	bf00      	nop

900004fc <__aeabi_idiv0>:
900004fc:	4770      	bx	lr
900004fe:	bf00      	nop

90000500 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
90000500:	b580      	push	{r7, lr}
90000502:	b090      	sub	sp, #64	; 0x40
90000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
90000506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000050a:	2200      	movs	r2, #0
9000050c:	601a      	str	r2, [r3, #0]
9000050e:	605a      	str	r2, [r3, #4]
90000510:	609a      	str	r2, [r3, #8]
90000512:	60da      	str	r2, [r3, #12]
90000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
90000516:	4bad      	ldr	r3, [pc, #692]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000051a:	4aac      	ldr	r2, [pc, #688]	; (900007cc <MX_GPIO_Init+0x2cc>)
9000051c:	f043 0310 	orr.w	r3, r3, #16
90000520:	6313      	str	r3, [r2, #48]	; 0x30
90000522:	4baa      	ldr	r3, [pc, #680]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000526:	f003 0310 	and.w	r3, r3, #16
9000052a:	62bb      	str	r3, [r7, #40]	; 0x28
9000052c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
9000052e:	4ba7      	ldr	r3, [pc, #668]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000532:	4aa6      	ldr	r2, [pc, #664]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90000538:	6313      	str	r3, [r2, #48]	; 0x30
9000053a:	4ba4      	ldr	r3, [pc, #656]	; (900007cc <MX_GPIO_Init+0x2cc>)
9000053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000053e:	f003 0340 	and.w	r3, r3, #64	; 0x40
90000542:	627b      	str	r3, [r7, #36]	; 0x24
90000544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
90000546:	4ba1      	ldr	r3, [pc, #644]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000054a:	4aa0      	ldr	r2, [pc, #640]	; (900007cc <MX_GPIO_Init+0x2cc>)
9000054c:	f043 0302 	orr.w	r3, r3, #2
90000550:	6313      	str	r3, [r2, #48]	; 0x30
90000552:	4b9e      	ldr	r3, [pc, #632]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000556:	f003 0302 	and.w	r3, r3, #2
9000055a:	623b      	str	r3, [r7, #32]
9000055c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
9000055e:	4b9b      	ldr	r3, [pc, #620]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000562:	4a9a      	ldr	r2, [pc, #616]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000564:	f043 0308 	orr.w	r3, r3, #8
90000568:	6313      	str	r3, [r2, #48]	; 0x30
9000056a:	4b98      	ldr	r3, [pc, #608]	; (900007cc <MX_GPIO_Init+0x2cc>)
9000056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000056e:	f003 0308 	and.w	r3, r3, #8
90000572:	61fb      	str	r3, [r7, #28]
90000574:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
90000576:	4b95      	ldr	r3, [pc, #596]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000057a:	4a94      	ldr	r2, [pc, #592]	; (900007cc <MX_GPIO_Init+0x2cc>)
9000057c:	f043 0304 	orr.w	r3, r3, #4
90000580:	6313      	str	r3, [r2, #48]	; 0x30
90000582:	4b92      	ldr	r3, [pc, #584]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000586:	f003 0304 	and.w	r3, r3, #4
9000058a:	61bb      	str	r3, [r7, #24]
9000058c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
9000058e:	4b8f      	ldr	r3, [pc, #572]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000592:	4a8e      	ldr	r2, [pc, #568]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000594:	f043 0301 	orr.w	r3, r3, #1
90000598:	6313      	str	r3, [r2, #48]	; 0x30
9000059a:	4b8c      	ldr	r3, [pc, #560]	; (900007cc <MX_GPIO_Init+0x2cc>)
9000059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000059e:	f003 0301 	and.w	r3, r3, #1
900005a2:	617b      	str	r3, [r7, #20]
900005a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
900005a6:	4b89      	ldr	r3, [pc, #548]	; (900007cc <MX_GPIO_Init+0x2cc>)
900005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900005aa:	4a88      	ldr	r2, [pc, #544]	; (900007cc <MX_GPIO_Init+0x2cc>)
900005ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900005b0:	6313      	str	r3, [r2, #48]	; 0x30
900005b2:	4b86      	ldr	r3, [pc, #536]	; (900007cc <MX_GPIO_Init+0x2cc>)
900005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900005b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
900005ba:	613b      	str	r3, [r7, #16]
900005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
900005be:	4b83      	ldr	r3, [pc, #524]	; (900007cc <MX_GPIO_Init+0x2cc>)
900005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900005c2:	4a82      	ldr	r2, [pc, #520]	; (900007cc <MX_GPIO_Init+0x2cc>)
900005c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900005c8:	6313      	str	r3, [r2, #48]	; 0x30
900005ca:	4b80      	ldr	r3, [pc, #512]	; (900007cc <MX_GPIO_Init+0x2cc>)
900005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900005ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
900005d2:	60fb      	str	r3, [r7, #12]
900005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
900005d6:	4b7d      	ldr	r3, [pc, #500]	; (900007cc <MX_GPIO_Init+0x2cc>)
900005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900005da:	4a7c      	ldr	r2, [pc, #496]	; (900007cc <MX_GPIO_Init+0x2cc>)
900005dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
900005e0:	6313      	str	r3, [r2, #48]	; 0x30
900005e2:	4b7a      	ldr	r3, [pc, #488]	; (900007cc <MX_GPIO_Init+0x2cc>)
900005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900005e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900005ea:	60bb      	str	r3, [r7, #8]
900005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900005ee:	4b77      	ldr	r3, [pc, #476]	; (900007cc <MX_GPIO_Init+0x2cc>)
900005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900005f2:	4a76      	ldr	r2, [pc, #472]	; (900007cc <MX_GPIO_Init+0x2cc>)
900005f4:	f043 0320 	orr.w	r3, r3, #32
900005f8:	6313      	str	r3, [r2, #48]	; 0x30
900005fa:	4b74      	ldr	r3, [pc, #464]	; (900007cc <MX_GPIO_Init+0x2cc>)
900005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900005fe:	f003 0320 	and.w	r3, r3, #32
90000602:	607b      	str	r3, [r7, #4]
90000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90000606:	4b71      	ldr	r3, [pc, #452]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000060a:	4a70      	ldr	r2, [pc, #448]	; (900007cc <MX_GPIO_Init+0x2cc>)
9000060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90000610:	6313      	str	r3, [r2, #48]	; 0x30
90000612:	4b6e      	ldr	r3, [pc, #440]	; (900007cc <MX_GPIO_Init+0x2cc>)
90000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000061a:	603b      	str	r3, [r7, #0]
9000061c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
9000061e:	2201      	movs	r2, #1
90000620:	2120      	movs	r1, #32
90000622:	486b      	ldr	r0, [pc, #428]	; (900007d0 <MX_GPIO_Init+0x2d0>)
90000624:	f001 f90c 	bl	90001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
90000628:	2200      	movs	r2, #0
9000062a:	f241 010e 	movw	r1, #4110	; 0x100e
9000062e:	4869      	ldr	r0, [pc, #420]	; (900007d4 <MX_GPIO_Init+0x2d4>)
90000630:	f001 f906 	bl	90001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
90000634:	2200      	movs	r2, #0
90000636:	2108      	movs	r1, #8
90000638:	4867      	ldr	r0, [pc, #412]	; (900007d8 <MX_GPIO_Init+0x2d8>)
9000063a:	f001 f901 	bl	90001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
9000063e:	2200      	movs	r2, #0
90000640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90000644:	4865      	ldr	r0, [pc, #404]	; (900007dc <MX_GPIO_Init+0x2dc>)
90000646:	f001 f8fb 	bl	90001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
9000064a:	2200      	movs	r2, #0
9000064c:	21c8      	movs	r1, #200	; 0xc8
9000064e:	4864      	ldr	r0, [pc, #400]	; (900007e0 <MX_GPIO_Init+0x2e0>)
90000650:	f001 f8f6 	bl	90001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
90000654:	2310      	movs	r3, #16
90000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000658:	2302      	movs	r3, #2
9000065a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000065c:	2300      	movs	r3, #0
9000065e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000660:	2300      	movs	r3, #0
90000662:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000664:	230e      	movs	r3, #14
90000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
90000668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000066c:	4619      	mov	r1, r3
9000066e:	485d      	ldr	r0, [pc, #372]	; (900007e4 <MX_GPIO_Init+0x2e4>)
90000670:	f000 ff3a 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
90000674:	2308      	movs	r3, #8
90000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000678:	2300      	movs	r3, #0
9000067a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000067c:	2300      	movs	r3, #0
9000067e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
90000680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000684:	4619      	mov	r1, r3
90000686:	4857      	ldr	r0, [pc, #348]	; (900007e4 <MX_GPIO_Init+0x2e4>)
90000688:	f000 ff2e 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
9000068c:	2304      	movs	r3, #4
9000068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000690:	2302      	movs	r3, #2
90000692:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000694:	2300      	movs	r3, #0
90000696:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000698:	2303      	movs	r3, #3
9000069a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
9000069c:	2309      	movs	r3, #9
9000069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
900006a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900006a4:	4619      	mov	r1, r3
900006a6:	484f      	ldr	r0, [pc, #316]	; (900007e4 <MX_GPIO_Init+0x2e4>)
900006a8:	f000 ff1e 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
900006ac:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
900006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900006b2:	2302      	movs	r3, #2
900006b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900006b6:	2300      	movs	r3, #0
900006b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900006ba:	2303      	movs	r3, #3
900006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
900006be:	230b      	movs	r3, #11
900006c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
900006c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900006c6:	4619      	mov	r1, r3
900006c8:	4845      	ldr	r0, [pc, #276]	; (900007e0 <MX_GPIO_Init+0x2e0>)
900006ca:	f000 ff0d 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
900006ce:	f64f 7383 	movw	r3, #65411	; 0xff83
900006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900006d4:	2302      	movs	r3, #2
900006d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900006d8:	2300      	movs	r3, #0
900006da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900006dc:	2303      	movs	r3, #3
900006de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900006e0:	230c      	movs	r3, #12
900006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900006e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900006e8:	4619      	mov	r1, r3
900006ea:	483e      	ldr	r0, [pc, #248]	; (900007e4 <MX_GPIO_Init+0x2e4>)
900006ec:	f000 fefc 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
900006f0:	f44f 7340 	mov.w	r3, #768	; 0x300
900006f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
900006f6:	2312      	movs	r3, #18
900006f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
900006fa:	2301      	movs	r3, #1
900006fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900006fe:	2300      	movs	r3, #0
90000700:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
90000702:	2304      	movs	r3, #4
90000704:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000070a:	4619      	mov	r1, r3
9000070c:	4836      	ldr	r0, [pc, #216]	; (900007e8 <MX_GPIO_Init+0x2e8>)
9000070e:	f000 feeb 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
90000712:	f643 4323 	movw	r3, #15395	; 0x3c23
90000716:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000718:	2302      	movs	r3, #2
9000071a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000071c:	2300      	movs	r3, #0
9000071e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000720:	2303      	movs	r3, #3
90000722:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
90000724:	230a      	movs	r3, #10
90000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000072c:	4619      	mov	r1, r3
9000072e:	482e      	ldr	r0, [pc, #184]	; (900007e8 <MX_GPIO_Init+0x2e8>)
90000730:	f000 feda 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
90000734:	2310      	movs	r3, #16
90000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000738:	2302      	movs	r3, #2
9000073a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000073c:	2300      	movs	r3, #0
9000073e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000740:	2300      	movs	r3, #0
90000742:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
90000744:	2302      	movs	r3, #2
90000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
90000748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000074c:	4619      	mov	r1, r3
9000074e:	4826      	ldr	r0, [pc, #152]	; (900007e8 <MX_GPIO_Init+0x2e8>)
90000750:	f000 feca 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
90000754:	2380      	movs	r3, #128	; 0x80
90000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000758:	2302      	movs	r3, #2
9000075a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000075c:	2300      	movs	r3, #0
9000075e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000760:	2300      	movs	r3, #0
90000762:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
90000764:	2308      	movs	r3, #8
90000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
90000768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000076c:	4619      	mov	r1, r3
9000076e:	4818      	ldr	r0, [pc, #96]	; (900007d0 <MX_GPIO_Init+0x2d0>)
90000770:	f000 feba 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
90000774:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
90000778:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000077a:	2302      	movs	r3, #2
9000077c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000077e:	2300      	movs	r3, #0
90000780:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000782:	2303      	movs	r3, #3
90000784:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
90000786:	230c      	movs	r3, #12
90000788:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000078a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000078e:	4619      	mov	r1, r3
90000790:	4816      	ldr	r0, [pc, #88]	; (900007ec <MX_GPIO_Init+0x2ec>)
90000792:	f000 fea9 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
90000796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9000079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000079c:	2302      	movs	r3, #2
9000079e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900007a0:	2300      	movs	r3, #0
900007a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900007a4:	2300      	movs	r3, #0
900007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
900007a8:	2301      	movs	r3, #1
900007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
900007ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900007b0:	4619      	mov	r1, r3
900007b2:	480f      	ldr	r0, [pc, #60]	; (900007f0 <MX_GPIO_Init+0x2f0>)
900007b4:	f000 fe98 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
900007b8:	2360      	movs	r3, #96	; 0x60
900007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900007bc:	2302      	movs	r3, #2
900007be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900007c0:	2300      	movs	r3, #0
900007c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900007c4:	2300      	movs	r3, #0
900007c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
900007c8:	230d      	movs	r3, #13
900007ca:	e013      	b.n	900007f4 <MX_GPIO_Init+0x2f4>
900007cc:	40023800 	.word	0x40023800
900007d0:	40020c00 	.word	0x40020c00
900007d4:	40022000 	.word	0x40022000
900007d8:	40022800 	.word	0x40022800
900007dc:	40021c00 	.word	0x40021c00
900007e0:	40021800 	.word	0x40021800
900007e4:	40021000 	.word	0x40021000
900007e8:	40020400 	.word	0x40020400
900007ec:	40020800 	.word	0x40020800
900007f0:	40020000 	.word	0x40020000
900007f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900007f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900007fa:	4619      	mov	r1, r3
900007fc:	48bb      	ldr	r0, [pc, #748]	; (90000aec <MX_GPIO_Init+0x5ec>)
900007fe:	f000 fe73 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
90000802:	2340      	movs	r3, #64	; 0x40
90000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000806:	2302      	movs	r3, #2
90000808:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000080a:	2300      	movs	r3, #0
9000080c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
9000080e:	2303      	movs	r3, #3
90000810:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
90000812:	230a      	movs	r3, #10
90000814:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
90000816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000081a:	4619      	mov	r1, r3
9000081c:	48b4      	ldr	r0, [pc, #720]	; (90000af0 <MX_GPIO_Init+0x5f0>)
9000081e:	f000 fe63 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
90000822:	f248 1333 	movw	r3, #33075	; 0x8133
90000826:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000828:	2302      	movs	r3, #2
9000082a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000082c:	2300      	movs	r3, #0
9000082e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000830:	2303      	movs	r3, #3
90000832:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000834:	230c      	movs	r3, #12
90000836:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000083c:	4619      	mov	r1, r3
9000083e:	48ad      	ldr	r0, [pc, #692]	; (90000af4 <MX_GPIO_Init+0x5f4>)
90000840:	f000 fe52 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
90000844:	f64e 73ff 	movw	r3, #61439	; 0xefff
90000848:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000084a:	2302      	movs	r3, #2
9000084c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
9000084e:	2300      	movs	r3, #0
90000850:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000852:	2300      	movs	r3, #0
90000854:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000856:	230e      	movs	r3, #14
90000858:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
9000085a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
9000085e:	4619      	mov	r1, r3
90000860:	48a5      	ldr	r0, [pc, #660]	; (90000af8 <MX_GPIO_Init+0x5f8>)
90000862:	f000 fe41 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
90000866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
9000086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
9000086c:	2300      	movs	r3, #0
9000086e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000870:	2300      	movs	r3, #0
90000872:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
90000874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000878:	4619      	mov	r1, r3
9000087a:	489f      	ldr	r0, [pc, #636]	; (90000af8 <MX_GPIO_Init+0x5f8>)
9000087c:	f000 fe34 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
90000880:	2340      	movs	r3, #64	; 0x40
90000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
90000884:	4b9d      	ldr	r3, [pc, #628]	; (90000afc <MX_GPIO_Init+0x5fc>)
90000886:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000888:	2300      	movs	r3, #0
9000088a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
9000088c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000890:	4619      	mov	r1, r3
90000892:	489b      	ldr	r0, [pc, #620]	; (90000b00 <MX_GPIO_Init+0x600>)
90000894:	f000 fe28 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
90000898:	f24c 7303 	movw	r3, #50947	; 0xc703
9000089c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
9000089e:	2302      	movs	r3, #2
900008a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900008a2:	2300      	movs	r3, #0
900008a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900008a6:	2303      	movs	r3, #3
900008a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900008aa:	230c      	movs	r3, #12
900008ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
900008ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900008b2:	4619      	mov	r1, r3
900008b4:	4892      	ldr	r0, [pc, #584]	; (90000b00 <MX_GPIO_Init+0x600>)
900008b6:	f000 fe17 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
900008ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
900008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900008c0:	2302      	movs	r3, #2
900008c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900008c4:	2300      	movs	r3, #0
900008c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900008c8:	2303      	movs	r3, #3
900008ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
900008cc:	230a      	movs	r3, #10
900008ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
900008d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900008d4:	4619      	mov	r1, r3
900008d6:	488b      	ldr	r0, [pc, #556]	; (90000b04 <MX_GPIO_Init+0x604>)
900008d8:	f000 fe06 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
900008dc:	23f0      	movs	r3, #240	; 0xf0
900008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900008e0:	2302      	movs	r3, #2
900008e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900008e4:	2300      	movs	r3, #0
900008e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900008e8:	2300      	movs	r3, #0
900008ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
900008ec:	230a      	movs	r3, #10
900008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900008f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900008f4:	4619      	mov	r1, r3
900008f6:	4884      	ldr	r0, [pc, #528]	; (90000b08 <MX_GPIO_Init+0x608>)
900008f8:	f000 fdf6 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
900008fc:	23f7      	movs	r3, #247	; 0xf7
900008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000900:	2302      	movs	r3, #2
90000902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000904:	2300      	movs	r3, #0
90000906:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000908:	2300      	movs	r3, #0
9000090a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
9000090c:	230e      	movs	r3, #14
9000090e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90000910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000914:	4619      	mov	r1, r3
90000916:	487d      	ldr	r0, [pc, #500]	; (90000b0c <MX_GPIO_Init+0x60c>)
90000918:	f000 fde6 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
9000091c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000922:	2302      	movs	r3, #2
90000924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000926:	2300      	movs	r3, #0
90000928:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000092a:	2300      	movs	r3, #0
9000092c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
9000092e:	2309      	movs	r3, #9
90000930:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
90000932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000936:	4619      	mov	r1, r3
90000938:	486e      	ldr	r0, [pc, #440]	; (90000af4 <MX_GPIO_Init+0x5f4>)
9000093a:	f000 fdd5 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
9000093e:	f44f 6380 	mov.w	r3, #1024	; 0x400
90000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000944:	2302      	movs	r3, #2
90000946:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000948:	2300      	movs	r3, #0
9000094a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000094c:	2300      	movs	r3, #0
9000094e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
90000950:	230a      	movs	r3, #10
90000952:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
90000954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000958:	4619      	mov	r1, r3
9000095a:	4866      	ldr	r0, [pc, #408]	; (90000af4 <MX_GPIO_Init+0x5f4>)
9000095c:	f000 fdc4 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
90000960:	2320      	movs	r3, #32
90000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000964:	2301      	movs	r3, #1
90000966:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000968:	2300      	movs	r3, #0
9000096a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000096c:	2300      	movs	r3, #0
9000096e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
90000970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000974:	4619      	mov	r1, r3
90000976:	4862      	ldr	r0, [pc, #392]	; (90000b00 <MX_GPIO_Init+0x600>)
90000978:	f000 fdb6 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
9000097c:	2308      	movs	r3, #8
9000097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000980:	2302      	movs	r3, #2
90000982:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000984:	2300      	movs	r3, #0
90000986:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000988:	2300      	movs	r3, #0
9000098a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
9000098c:	230d      	movs	r3, #13
9000098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
90000990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000994:	4619      	mov	r1, r3
90000996:	485a      	ldr	r0, [pc, #360]	; (90000b00 <MX_GPIO_Init+0x600>)
90000998:	f000 fda6 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PI1 PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
9000099c:	f241 030e 	movw	r3, #4110	; 0x100e
900009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900009a2:	2301      	movs	r3, #1
900009a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900009a6:	2300      	movs	r3, #0
900009a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900009aa:	2300      	movs	r3, #0
900009ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900009ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900009b2:	4619      	mov	r1, r3
900009b4:	4854      	ldr	r0, [pc, #336]	; (90000b08 <MX_GPIO_Init+0x608>)
900009b6:	f000 fd97 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
900009ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
900009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
900009c0:	2300      	movs	r3, #0
900009c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900009c4:	2300      	movs	r3, #0
900009c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
900009c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900009cc:	4619      	mov	r1, r3
900009ce:	4850      	ldr	r0, [pc, #320]	; (90000b10 <MX_GPIO_Init+0x610>)
900009d0:	f000 fd8a 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
900009d4:	f64f 033f 	movw	r3, #63551	; 0xf83f
900009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900009da:	2302      	movs	r3, #2
900009dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900009de:	2300      	movs	r3, #0
900009e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900009e2:	2303      	movs	r3, #3
900009e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900009e6:	230c      	movs	r3, #12
900009e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
900009ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900009ee:	4619      	mov	r1, r3
900009f0:	4848      	ldr	r0, [pc, #288]	; (90000b14 <MX_GPIO_Init+0x614>)
900009f2:	f000 fd79 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
900009f6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
900009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900009fc:	2302      	movs	r3, #2
900009fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a00:	2300      	movs	r3, #0
90000a02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000a04:	2300      	movs	r3, #0
90000a06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90000a08:	230e      	movs	r3, #14
90000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90000a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000a10:	4619      	mov	r1, r3
90000a12:	483d      	ldr	r0, [pc, #244]	; (90000b08 <MX_GPIO_Init+0x608>)
90000a14:	f000 fd68 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
90000a18:	2308      	movs	r3, #8
90000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000a1c:	2301      	movs	r3, #1
90000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a20:	2300      	movs	r3, #0
90000a22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000a24:	2300      	movs	r3, #0
90000a26:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90000a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000a2c:	4619      	mov	r1, r3
90000a2e:	4837      	ldr	r0, [pc, #220]	; (90000b0c <MX_GPIO_Init+0x60c>)
90000a30:	f000 fd5a 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
90000a34:	f44f 7300 	mov.w	r3, #512	; 0x200
90000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000a3a:	2302      	movs	r3, #2
90000a3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a3e:	2300      	movs	r3, #0
90000a40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000a42:	2300      	movs	r3, #0
90000a44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000a46:	230d      	movs	r3, #13
90000a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
90000a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000a4e:	4619      	mov	r1, r3
90000a50:	4828      	ldr	r0, [pc, #160]	; (90000af4 <MX_GPIO_Init+0x5f4>)
90000a52:	f000 fd49 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
90000a56:	2310      	movs	r3, #16
90000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000a5a:	2300      	movs	r3, #0
90000a5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a5e:	2300      	movs	r3, #0
90000a60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
90000a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000a66:	4619      	mov	r1, r3
90000a68:	4825      	ldr	r0, [pc, #148]	; (90000b00 <MX_GPIO_Init+0x600>)
90000a6a:	f000 fd3d 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
90000a6e:	2304      	movs	r3, #4
90000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000a72:	2302      	movs	r3, #2
90000a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a76:	2300      	movs	r3, #0
90000a78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000a7a:	2303      	movs	r3, #3
90000a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
90000a7e:	230c      	movs	r3, #12
90000a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
90000a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000a86:	4619      	mov	r1, r3
90000a88:	481d      	ldr	r0, [pc, #116]	; (90000b00 <MX_GPIO_Init+0x600>)
90000a8a:	f000 fd2d 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
90000a8e:	f248 0304 	movw	r3, #32772	; 0x8004
90000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000a94:	2300      	movs	r3, #0
90000a96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000a98:	2300      	movs	r3, #0
90000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000aa0:	4619      	mov	r1, r3
90000aa2:	481d      	ldr	r0, [pc, #116]	; (90000b18 <MX_GPIO_Init+0x618>)
90000aa4:	f000 fd20 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
90000aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000aae:	2301      	movs	r3, #1
90000ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ab2:	2300      	movs	r3, #0
90000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000ab6:	2300      	movs	r3, #0
90000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
90000aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000abe:	4619      	mov	r1, r3
90000ac0:	4815      	ldr	r0, [pc, #84]	; (90000b18 <MX_GPIO_Init+0x618>)
90000ac2:	f000 fd11 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
90000ac6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
90000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000acc:	2302      	movs	r3, #2
90000ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000ad0:	2300      	movs	r3, #0
90000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000ad4:	2300      	movs	r3, #0
90000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000ad8:	230d      	movs	r3, #13
90000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ae0:	4619      	mov	r1, r3
90000ae2:	480d      	ldr	r0, [pc, #52]	; (90000b18 <MX_GPIO_Init+0x618>)
90000ae4:	f000 fd00 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
90000ae8:	2301      	movs	r3, #1
90000aea:	e017      	b.n	90000b1c <MX_GPIO_Init+0x61c>
90000aec:	40021000 	.word	0x40021000
90000af0:	40020400 	.word	0x40020400
90000af4:	40021800 	.word	0x40021800
90000af8:	40022400 	.word	0x40022400
90000afc:	10120000 	.word	0x10120000
90000b00:	40020c00 	.word	0x40020c00
90000b04:	40020000 	.word	0x40020000
90000b08:	40022000 	.word	0x40022000
90000b0c:	40022800 	.word	0x40022800
90000b10:	40020800 	.word	0x40020800
90000b14:	40021400 	.word	0x40021400
90000b18:	40021c00 	.word	0x40021c00
90000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b1e:	2302      	movs	r3, #2
90000b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b22:	2300      	movs	r3, #0
90000b24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b26:	2300      	movs	r3, #0
90000b28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
90000b2a:	2302      	movs	r3, #2
90000b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
90000b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000b32:	4619      	mov	r1, r3
90000b34:	489d      	ldr	r0, [pc, #628]	; (90000dac <MX_GPIO_Init+0x8ac>)
90000b36:	f000 fcd7 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
90000b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
90000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b40:	2302      	movs	r3, #2
90000b42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b44:	2300      	movs	r3, #0
90000b46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000b48:	2300      	movs	r3, #0
90000b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
90000b4c:	2301      	movs	r3, #1
90000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
90000b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000b54:	4619      	mov	r1, r3
90000b56:	4896      	ldr	r0, [pc, #600]	; (90000db0 <MX_GPIO_Init+0x8b0>)
90000b58:	f000 fcc6 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
90000b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
90000b62:	4b94      	ldr	r3, [pc, #592]	; (90000db4 <MX_GPIO_Init+0x8b4>)
90000b64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b66:	2300      	movs	r3, #0
90000b68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
90000b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000b6e:	4619      	mov	r1, r3
90000b70:	488e      	ldr	r0, [pc, #568]	; (90000dac <MX_GPIO_Init+0x8ac>)
90000b72:	f000 fcb9 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
90000b76:	23c0      	movs	r3, #192	; 0xc0
90000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b7a:	2302      	movs	r3, #2
90000b7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b7e:	2300      	movs	r3, #0
90000b80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000b82:	2303      	movs	r3, #3
90000b84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
90000b86:	2308      	movs	r3, #8
90000b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000b8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000b8e:	4619      	mov	r1, r3
90000b90:	4889      	ldr	r0, [pc, #548]	; (90000db8 <MX_GPIO_Init+0x8b8>)
90000b92:	f000 fca9 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
90000b96:	2310      	movs	r3, #16
90000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000b9a:	2302      	movs	r3, #2
90000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000b9e:	2300      	movs	r3, #0
90000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000ba2:	2303      	movs	r3, #3
90000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
90000ba6:	230a      	movs	r3, #10
90000ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
90000baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000bae:	4619      	mov	r1, r3
90000bb0:	4882      	ldr	r0, [pc, #520]	; (90000dbc <MX_GPIO_Init+0x8bc>)
90000bb2:	f000 fc99 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
90000bb6:	2328      	movs	r3, #40	; 0x28
90000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000bba:	2302      	movs	r3, #2
90000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000bbe:	2300      	movs	r3, #0
90000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000bc2:	2303      	movs	r3, #3
90000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000bc6:	230c      	movs	r3, #12
90000bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000bce:	4619      	mov	r1, r3
90000bd0:	487a      	ldr	r0, [pc, #488]	; (90000dbc <MX_GPIO_Init+0x8bc>)
90000bd2:	f000 fc89 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
90000bd6:	23c8      	movs	r3, #200	; 0xc8
90000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90000bda:	2301      	movs	r3, #1
90000bdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000bde:	2300      	movs	r3, #0
90000be0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000be2:	2300      	movs	r3, #0
90000be4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90000be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000bea:	4619      	mov	r1, r3
90000bec:	4874      	ldr	r0, [pc, #464]	; (90000dc0 <MX_GPIO_Init+0x8c0>)
90000bee:	f000 fc7b 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
90000bf2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
90000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
90000bf8:	2303      	movs	r3, #3
90000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000bfc:	2300      	movs	r3, #0
90000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90000c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c04:	4619      	mov	r1, r3
90000c06:	486f      	ldr	r0, [pc, #444]	; (90000dc4 <MX_GPIO_Init+0x8c4>)
90000c08:	f000 fc6e 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
90000c0c:	2308      	movs	r3, #8
90000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c10:	2302      	movs	r3, #2
90000c12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c14:	2300      	movs	r3, #0
90000c16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000c18:	2303      	movs	r3, #3
90000c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90000c1c:	230c      	movs	r3, #12
90000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
90000c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c24:	4619      	mov	r1, r3
90000c26:	4864      	ldr	r0, [pc, #400]	; (90000db8 <MX_GPIO_Init+0x8b8>)
90000c28:	f000 fc5e 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
90000c2c:	2305      	movs	r3, #5
90000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c30:	2302      	movs	r3, #2
90000c32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c34:	2300      	movs	r3, #0
90000c36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000c38:	2303      	movs	r3, #3
90000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
90000c3c:	230a      	movs	r3, #10
90000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c44:	4619      	mov	r1, r3
90000c46:	485c      	ldr	r0, [pc, #368]	; (90000db8 <MX_GPIO_Init+0x8b8>)
90000c48:	f000 fc4e 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
90000c4c:	2332      	movs	r3, #50	; 0x32
90000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c50:	2302      	movs	r3, #2
90000c52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c54:	2300      	movs	r3, #0
90000c56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000c58:	2303      	movs	r3, #3
90000c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90000c5c:	230b      	movs	r3, #11
90000c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90000c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c64:	4619      	mov	r1, r3
90000c66:	4854      	ldr	r0, [pc, #336]	; (90000db8 <MX_GPIO_Init+0x8b8>)
90000c68:	f000 fc3e 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
90000c6c:	2304      	movs	r3, #4
90000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c70:	2302      	movs	r3, #2
90000c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c74:	2300      	movs	r3, #0
90000c76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000c78:	2303      	movs	r3, #3
90000c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
90000c7c:	2309      	movs	r3, #9
90000c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000c84:	4619      	mov	r1, r3
90000c86:	4850      	ldr	r0, [pc, #320]	; (90000dc8 <MX_GPIO_Init+0x8c8>)
90000c88:	f000 fc2e 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
90000c8c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
90000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000c92:	2302      	movs	r3, #2
90000c94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000c96:	2300      	movs	r3, #0
90000c98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000c9a:	2303      	movs	r3, #3
90000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
90000c9e:	2309      	movs	r3, #9
90000ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90000ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000ca6:	4619      	mov	r1, r3
90000ca8:	4848      	ldr	r0, [pc, #288]	; (90000dcc <MX_GPIO_Init+0x8cc>)
90000caa:	f000 fc1d 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
90000cae:	2304      	movs	r3, #4
90000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
90000cb2:	2300      	movs	r3, #0
90000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cb6:	2300      	movs	r3, #0
90000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
90000cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000cbe:	4619      	mov	r1, r3
90000cc0:	483f      	ldr	r0, [pc, #252]	; (90000dc0 <MX_GPIO_Init+0x8c0>)
90000cc2:	f000 fc11 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
90000cc6:	2386      	movs	r3, #134	; 0x86
90000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000cca:	2302      	movs	r3, #2
90000ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cce:	2300      	movs	r3, #0
90000cd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000cd2:	2303      	movs	r3, #3
90000cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90000cd6:	230b      	movs	r3, #11
90000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000cde:	4619      	mov	r1, r3
90000ce0:	4833      	ldr	r0, [pc, #204]	; (90000db0 <MX_GPIO_Init+0x8b0>)
90000ce2:	f000 fc01 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
90000ce6:	2301      	movs	r3, #1
90000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
90000cea:	2303      	movs	r3, #3
90000cec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000cee:	2300      	movs	r3, #0
90000cf0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
90000cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000cf6:	4619      	mov	r1, r3
90000cf8:	482d      	ldr	r0, [pc, #180]	; (90000db0 <MX_GPIO_Init+0x8b0>)
90000cfa:	f000 fbf5 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
90000cfe:	2350      	movs	r3, #80	; 0x50
90000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d02:	2302      	movs	r3, #2
90000d04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d06:	2300      	movs	r3, #0
90000d08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000d0a:	2300      	movs	r3, #0
90000d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
90000d0e:	230d      	movs	r3, #13
90000d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d16:	4619      	mov	r1, r3
90000d18:	4825      	ldr	r0, [pc, #148]	; (90000db0 <MX_GPIO_Init+0x8b0>)
90000d1a:	f000 fbe5 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
90000d1e:	f44f 73c0 	mov.w	r3, #384	; 0x180
90000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
90000d24:	2312      	movs	r3, #18
90000d26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
90000d28:	2301      	movs	r3, #1
90000d2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d2c:	2303      	movs	r3, #3
90000d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
90000d30:	2304      	movs	r3, #4
90000d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90000d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d38:	4619      	mov	r1, r3
90000d3a:	4820      	ldr	r0, [pc, #128]	; (90000dbc <MX_GPIO_Init+0x8bc>)
90000d3c:	f000 fbd4 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
90000d40:	2328      	movs	r3, #40	; 0x28
90000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d44:	2302      	movs	r3, #2
90000d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d48:	2300      	movs	r3, #0
90000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90000d4c:	2303      	movs	r3, #3
90000d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
90000d50:	230a      	movs	r3, #10
90000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90000d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d58:	4619      	mov	r1, r3
90000d5a:	4815      	ldr	r0, [pc, #84]	; (90000db0 <MX_GPIO_Init+0x8b0>)
90000d5c:	f000 fbc4 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
90000d60:	2340      	movs	r3, #64	; 0x40
90000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d64:	2302      	movs	r3, #2
90000d66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d68:	2300      	movs	r3, #0
90000d6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000d6c:	2300      	movs	r3, #0
90000d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
90000d70:	2309      	movs	r3, #9
90000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
90000d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d78:	4619      	mov	r1, r3
90000d7a:	4810      	ldr	r0, [pc, #64]	; (90000dbc <MX_GPIO_Init+0x8bc>)
90000d7c:	f000 fbb4 	bl	900014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
90000d80:	f44f 4340 	mov.w	r3, #49152	; 0xc000
90000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90000d86:	2302      	movs	r3, #2
90000d88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90000d8a:	2300      	movs	r3, #0
90000d8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90000d8e:	2300      	movs	r3, #0
90000d90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
90000d92:	2305      	movs	r3, #5
90000d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90000d9a:	4619      	mov	r1, r3
90000d9c:	480a      	ldr	r0, [pc, #40]	; (90000dc8 <MX_GPIO_Init+0x8c8>)
90000d9e:	f000 fba3 	bl	900014e8 <HAL_GPIO_Init>

}
90000da2:	bf00      	nop
90000da4:	3740      	adds	r7, #64	; 0x40
90000da6:	46bd      	mov	sp, r7
90000da8:	bd80      	pop	{r7, pc}
90000daa:	bf00      	nop
90000dac:	40022000 	.word	0x40022000
90000db0:	40020000 	.word	0x40020000
90000db4:	10120000 	.word	0x10120000
90000db8:	40020800 	.word	0x40020800
90000dbc:	40021c00 	.word	0x40021c00
90000dc0:	40021800 	.word	0x40021800
90000dc4:	40021400 	.word	0x40021400
90000dc8:	40020400 	.word	0x40020400
90000dcc:	40020c00 	.word	0x40020c00

90000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
90000dd0:	b5b0      	push	{r4, r5, r7, lr}
90000dd2:	b086      	sub	sp, #24
90000dd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
90000dd6:	f000 f9eb 	bl	900011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
90000dda:	f000 f81f 	bl	90000e1c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
90000dde:	f7ff fb8f 	bl	90000500 <MX_GPIO_Init>
  MX_USART1_UART_Init();
90000de2:	f000 f921 	bl	90001028 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */

  uint8_t message[20]=" Code Running \n\r";
90000de6:	4b0b      	ldr	r3, [pc, #44]	; (90000e14 <main+0x44>)
90000de8:	1d3c      	adds	r4, r7, #4
90000dea:	461d      	mov	r5, r3
90000dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90000dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90000df0:	682b      	ldr	r3, [r5, #0]
90000df2:	7023      	strb	r3, [r4, #0]
90000df4:	f107 0315 	add.w	r3, r7, #21
90000df8:	2200      	movs	r2, #0
90000dfa:	801a      	strh	r2, [r3, #0]
90000dfc:	709a      	strb	r2, [r3, #2]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
   HAL_Delay(1000);
90000dfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
90000e02:	f000 fa3b 	bl	9000127c <HAL_Delay>
   HAL_UART_Transmit(&huart1, message, 20, 100);
90000e06:	1d39      	adds	r1, r7, #4
90000e08:	2364      	movs	r3, #100	; 0x64
90000e0a:	2214      	movs	r2, #20
90000e0c:	4802      	ldr	r0, [pc, #8]	; (90000e18 <main+0x48>)
90000e0e:	f001 fa49 	bl	900022a4 <HAL_UART_Transmit>
   HAL_Delay(1000);
90000e12:	e7f4      	b.n	90000dfe <main+0x2e>
90000e14:	90002ba4 	.word	0x90002ba4
90000e18:	20000028 	.word	0x20000028

90000e1c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
90000e1c:	b580      	push	{r7, lr}
90000e1e:	b094      	sub	sp, #80	; 0x50
90000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90000e22:	f107 0320 	add.w	r3, r7, #32
90000e26:	2230      	movs	r2, #48	; 0x30
90000e28:	2100      	movs	r1, #0
90000e2a:	4618      	mov	r0, r3
90000e2c:	f001 fea6 	bl	90002b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90000e30:	f107 030c 	add.w	r3, r7, #12
90000e34:	2200      	movs	r2, #0
90000e36:	601a      	str	r2, [r3, #0]
90000e38:	605a      	str	r2, [r3, #4]
90000e3a:	609a      	str	r2, [r3, #8]
90000e3c:	60da      	str	r2, [r3, #12]
90000e3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
90000e40:	4b32      	ldr	r3, [pc, #200]	; (90000f0c <_Z18SystemClock_Configv+0xf0>)
90000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000e44:	4a31      	ldr	r2, [pc, #196]	; (90000f0c <_Z18SystemClock_Configv+0xf0>)
90000e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90000e4a:	6413      	str	r3, [r2, #64]	; 0x40
90000e4c:	4b2f      	ldr	r3, [pc, #188]	; (90000f0c <_Z18SystemClock_Configv+0xf0>)
90000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90000e54:	60bb      	str	r3, [r7, #8]
90000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90000e58:	4b2d      	ldr	r3, [pc, #180]	; (90000f10 <_Z18SystemClock_Configv+0xf4>)
90000e5a:	681b      	ldr	r3, [r3, #0]
90000e5c:	4a2c      	ldr	r2, [pc, #176]	; (90000f10 <_Z18SystemClock_Configv+0xf4>)
90000e5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
90000e62:	6013      	str	r3, [r2, #0]
90000e64:	4b2a      	ldr	r3, [pc, #168]	; (90000f10 <_Z18SystemClock_Configv+0xf4>)
90000e66:	681b      	ldr	r3, [r3, #0]
90000e68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90000e6c:	607b      	str	r3, [r7, #4]
90000e6e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90000e70:	2301      	movs	r3, #1
90000e72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
90000e74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
90000e78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90000e7a:	2302      	movs	r3, #2
90000e7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90000e7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
90000e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
90000e84:	2319      	movs	r3, #25
90000e86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
90000e88:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
90000e8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
90000e8e:	2302      	movs	r3, #2
90000e90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
90000e92:	2302      	movs	r3, #2
90000e94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90000e96:	f107 0320 	add.w	r3, r7, #32
90000e9a:	4618      	mov	r0, r3
90000e9c:	f000 fd3a 	bl	90001914 <HAL_RCC_OscConfig>
90000ea0:	4603      	mov	r3, r0
90000ea2:	2b00      	cmp	r3, #0
90000ea4:	bf14      	ite	ne
90000ea6:	2301      	movne	r3, #1
90000ea8:	2300      	moveq	r3, #0
90000eaa:	b2db      	uxtb	r3, r3
90000eac:	2b00      	cmp	r3, #0
90000eae:	d001      	beq.n	90000eb4 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
90000eb0:	f000 f830 	bl	90000f14 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
90000eb4:	f000 fcde 	bl	90001874 <HAL_PWREx_EnableOverDrive>
90000eb8:	4603      	mov	r3, r0
90000eba:	2b00      	cmp	r3, #0
90000ebc:	bf14      	ite	ne
90000ebe:	2301      	movne	r3, #1
90000ec0:	2300      	moveq	r3, #0
90000ec2:	b2db      	uxtb	r3, r3
90000ec4:	2b00      	cmp	r3, #0
90000ec6:	d001      	beq.n	90000ecc <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
90000ec8:	f000 f824 	bl	90000f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90000ecc:	230f      	movs	r3, #15
90000ece:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90000ed0:	2302      	movs	r3, #2
90000ed2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
90000ed4:	2300      	movs	r3, #0
90000ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
90000ed8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
90000edc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
90000ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90000ee2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
90000ee4:	f107 030c 	add.w	r3, r7, #12
90000ee8:	2107      	movs	r1, #7
90000eea:	4618      	mov	r0, r3
90000eec:	f000 ffb6 	bl	90001e5c <HAL_RCC_ClockConfig>
90000ef0:	4603      	mov	r3, r0
90000ef2:	2b00      	cmp	r3, #0
90000ef4:	bf14      	ite	ne
90000ef6:	2301      	movne	r3, #1
90000ef8:	2300      	moveq	r3, #0
90000efa:	b2db      	uxtb	r3, r3
90000efc:	2b00      	cmp	r3, #0
90000efe:	d001      	beq.n	90000f04 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
90000f00:	f000 f808 	bl	90000f14 <Error_Handler>
  }
}
90000f04:	bf00      	nop
90000f06:	3750      	adds	r7, #80	; 0x50
90000f08:	46bd      	mov	sp, r7
90000f0a:	bd80      	pop	{r7, pc}
90000f0c:	40023800 	.word	0x40023800
90000f10:	40007000 	.word	0x40007000

90000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
90000f14:	b480      	push	{r7}
90000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
90000f18:	b672      	cpsid	i
}
90000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
90000f1c:	e7fe      	b.n	90000f1c <Error_Handler+0x8>
	...

90000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
90000f20:	b480      	push	{r7}
90000f22:	b083      	sub	sp, #12
90000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
90000f26:	4b0f      	ldr	r3, [pc, #60]	; (90000f64 <HAL_MspInit+0x44>)
90000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000f2a:	4a0e      	ldr	r2, [pc, #56]	; (90000f64 <HAL_MspInit+0x44>)
90000f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90000f30:	6413      	str	r3, [r2, #64]	; 0x40
90000f32:	4b0c      	ldr	r3, [pc, #48]	; (90000f64 <HAL_MspInit+0x44>)
90000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90000f3a:	607b      	str	r3, [r7, #4]
90000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90000f3e:	4b09      	ldr	r3, [pc, #36]	; (90000f64 <HAL_MspInit+0x44>)
90000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90000f42:	4a08      	ldr	r2, [pc, #32]	; (90000f64 <HAL_MspInit+0x44>)
90000f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
90000f48:	6453      	str	r3, [r2, #68]	; 0x44
90000f4a:	4b06      	ldr	r3, [pc, #24]	; (90000f64 <HAL_MspInit+0x44>)
90000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90000f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90000f52:	603b      	str	r3, [r7, #0]
90000f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90000f56:	bf00      	nop
90000f58:	370c      	adds	r7, #12
90000f5a:	46bd      	mov	sp, r7
90000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f60:	4770      	bx	lr
90000f62:	bf00      	nop
90000f64:	40023800 	.word	0x40023800

90000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
90000f68:	b480      	push	{r7}
90000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
90000f6c:	e7fe      	b.n	90000f6c <NMI_Handler+0x4>

90000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
90000f6e:	b480      	push	{r7}
90000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90000f72:	e7fe      	b.n	90000f72 <HardFault_Handler+0x4>

90000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
90000f74:	b480      	push	{r7}
90000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90000f78:	e7fe      	b.n	90000f78 <MemManage_Handler+0x4>

90000f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
90000f7a:	b480      	push	{r7}
90000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90000f7e:	e7fe      	b.n	90000f7e <BusFault_Handler+0x4>

90000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
90000f80:	b480      	push	{r7}
90000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90000f84:	e7fe      	b.n	90000f84 <UsageFault_Handler+0x4>

90000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
90000f86:	b480      	push	{r7}
90000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
90000f8a:	bf00      	nop
90000f8c:	46bd      	mov	sp, r7
90000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
90000f92:	4770      	bx	lr

90000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
90000f94:	b480      	push	{r7}
90000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
90000f98:	bf00      	nop
90000f9a:	46bd      	mov	sp, r7
90000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fa0:	4770      	bx	lr

90000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
90000fa2:	b480      	push	{r7}
90000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
90000fa6:	bf00      	nop
90000fa8:	46bd      	mov	sp, r7
90000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
90000fae:	4770      	bx	lr

90000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
90000fb0:	b580      	push	{r7, lr}
90000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
90000fb4:	f000 f942 	bl	9000123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
90000fb8:	bf00      	nop
90000fba:	bd80      	pop	{r7, pc}

90000fbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
90000fbc:	b480      	push	{r7}
90000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
90000fc0:	4b15      	ldr	r3, [pc, #84]	; (90001018 <SystemInit+0x5c>)
90000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90000fc6:	4a14      	ldr	r2, [pc, #80]	; (90001018 <SystemInit+0x5c>)
90000fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
90000fd0:	4b12      	ldr	r3, [pc, #72]	; (9000101c <SystemInit+0x60>)
90000fd2:	681b      	ldr	r3, [r3, #0]
90000fd4:	4a11      	ldr	r2, [pc, #68]	; (9000101c <SystemInit+0x60>)
90000fd6:	f043 0301 	orr.w	r3, r3, #1
90000fda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90000fdc:	4b0f      	ldr	r3, [pc, #60]	; (9000101c <SystemInit+0x60>)
90000fde:	2200      	movs	r2, #0
90000fe0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
90000fe2:	4b0e      	ldr	r3, [pc, #56]	; (9000101c <SystemInit+0x60>)
90000fe4:	681a      	ldr	r2, [r3, #0]
90000fe6:	490d      	ldr	r1, [pc, #52]	; (9000101c <SystemInit+0x60>)
90000fe8:	4b0d      	ldr	r3, [pc, #52]	; (90001020 <SystemInit+0x64>)
90000fea:	4013      	ands	r3, r2
90000fec:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
90000fee:	4b0b      	ldr	r3, [pc, #44]	; (9000101c <SystemInit+0x60>)
90000ff0:	4a0c      	ldr	r2, [pc, #48]	; (90001024 <SystemInit+0x68>)
90000ff2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
90000ff4:	4b09      	ldr	r3, [pc, #36]	; (9000101c <SystemInit+0x60>)
90000ff6:	681b      	ldr	r3, [r3, #0]
90000ff8:	4a08      	ldr	r2, [pc, #32]	; (9000101c <SystemInit+0x60>)
90000ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
90000ffe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
90001000:	4b06      	ldr	r3, [pc, #24]	; (9000101c <SystemInit+0x60>)
90001002:	2200      	movs	r2, #0
90001004:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = APPLICATION_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation to APPLICATION_ADDRESS in preprocessor defines */
90001006:	4b04      	ldr	r3, [pc, #16]	; (90001018 <SystemInit+0x5c>)
90001008:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
9000100c:	609a      	str	r2, [r3, #8]
#endif
}
9000100e:	bf00      	nop
90001010:	46bd      	mov	sp, r7
90001012:	f85d 7b04 	ldr.w	r7, [sp], #4
90001016:	4770      	bx	lr
90001018:	e000ed00 	.word	0xe000ed00
9000101c:	40023800 	.word	0x40023800
90001020:	fef6ffff 	.word	0xfef6ffff
90001024:	24003010 	.word	0x24003010

90001028 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
90001028:	b580      	push	{r7, lr}
9000102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
9000102c:	4b14      	ldr	r3, [pc, #80]	; (90001080 <MX_USART1_UART_Init+0x58>)
9000102e:	4a15      	ldr	r2, [pc, #84]	; (90001084 <MX_USART1_UART_Init+0x5c>)
90001030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
90001032:	4b13      	ldr	r3, [pc, #76]	; (90001080 <MX_USART1_UART_Init+0x58>)
90001034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
90001038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
9000103a:	4b11      	ldr	r3, [pc, #68]	; (90001080 <MX_USART1_UART_Init+0x58>)
9000103c:	2200      	movs	r2, #0
9000103e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
90001040:	4b0f      	ldr	r3, [pc, #60]	; (90001080 <MX_USART1_UART_Init+0x58>)
90001042:	2200      	movs	r2, #0
90001044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
90001046:	4b0e      	ldr	r3, [pc, #56]	; (90001080 <MX_USART1_UART_Init+0x58>)
90001048:	2200      	movs	r2, #0
9000104a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
9000104c:	4b0c      	ldr	r3, [pc, #48]	; (90001080 <MX_USART1_UART_Init+0x58>)
9000104e:	220c      	movs	r2, #12
90001050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90001052:	4b0b      	ldr	r3, [pc, #44]	; (90001080 <MX_USART1_UART_Init+0x58>)
90001054:	2200      	movs	r2, #0
90001056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
90001058:	4b09      	ldr	r3, [pc, #36]	; (90001080 <MX_USART1_UART_Init+0x58>)
9000105a:	2200      	movs	r2, #0
9000105c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
9000105e:	4b08      	ldr	r3, [pc, #32]	; (90001080 <MX_USART1_UART_Init+0x58>)
90001060:	2200      	movs	r2, #0
90001062:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90001064:	4b06      	ldr	r3, [pc, #24]	; (90001080 <MX_USART1_UART_Init+0x58>)
90001066:	2200      	movs	r2, #0
90001068:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
9000106a:	4805      	ldr	r0, [pc, #20]	; (90001080 <MX_USART1_UART_Init+0x58>)
9000106c:	f001 f8cc 	bl	90002208 <HAL_UART_Init>
90001070:	4603      	mov	r3, r0
90001072:	2b00      	cmp	r3, #0
90001074:	d001      	beq.n	9000107a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
90001076:	f7ff ff4d 	bl	90000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
9000107a:	bf00      	nop
9000107c:	bd80      	pop	{r7, pc}
9000107e:	bf00      	nop
90001080:	20000028 	.word	0x20000028
90001084:	40011000 	.word	0x40011000

90001088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
90001088:	b580      	push	{r7, lr}
9000108a:	b08a      	sub	sp, #40	; 0x28
9000108c:	af00      	add	r7, sp, #0
9000108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
90001090:	f107 0314 	add.w	r3, r7, #20
90001094:	2200      	movs	r2, #0
90001096:	601a      	str	r2, [r3, #0]
90001098:	605a      	str	r2, [r3, #4]
9000109a:	609a      	str	r2, [r3, #8]
9000109c:	60da      	str	r2, [r3, #12]
9000109e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
900010a0:	687b      	ldr	r3, [r7, #4]
900010a2:	681b      	ldr	r3, [r3, #0]
900010a4:	4a29      	ldr	r2, [pc, #164]	; (9000114c <HAL_UART_MspInit+0xc4>)
900010a6:	4293      	cmp	r3, r2
900010a8:	d14c      	bne.n	90001144 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
900010aa:	4b29      	ldr	r3, [pc, #164]	; (90001150 <HAL_UART_MspInit+0xc8>)
900010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900010ae:	4a28      	ldr	r2, [pc, #160]	; (90001150 <HAL_UART_MspInit+0xc8>)
900010b0:	f043 0310 	orr.w	r3, r3, #16
900010b4:	6453      	str	r3, [r2, #68]	; 0x44
900010b6:	4b26      	ldr	r3, [pc, #152]	; (90001150 <HAL_UART_MspInit+0xc8>)
900010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900010ba:	f003 0310 	and.w	r3, r3, #16
900010be:	613b      	str	r3, [r7, #16]
900010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
900010c2:	4b23      	ldr	r3, [pc, #140]	; (90001150 <HAL_UART_MspInit+0xc8>)
900010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900010c6:	4a22      	ldr	r2, [pc, #136]	; (90001150 <HAL_UART_MspInit+0xc8>)
900010c8:	f043 0302 	orr.w	r3, r3, #2
900010cc:	6313      	str	r3, [r2, #48]	; 0x30
900010ce:	4b20      	ldr	r3, [pc, #128]	; (90001150 <HAL_UART_MspInit+0xc8>)
900010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900010d2:	f003 0302 	and.w	r3, r3, #2
900010d6:	60fb      	str	r3, [r7, #12]
900010d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
900010da:	4b1d      	ldr	r3, [pc, #116]	; (90001150 <HAL_UART_MspInit+0xc8>)
900010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900010de:	4a1c      	ldr	r2, [pc, #112]	; (90001150 <HAL_UART_MspInit+0xc8>)
900010e0:	f043 0301 	orr.w	r3, r3, #1
900010e4:	6313      	str	r3, [r2, #48]	; 0x30
900010e6:	4b1a      	ldr	r3, [pc, #104]	; (90001150 <HAL_UART_MspInit+0xc8>)
900010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900010ea:	f003 0301 	and.w	r3, r3, #1
900010ee:	60bb      	str	r3, [r7, #8]
900010f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
900010f2:	2380      	movs	r3, #128	; 0x80
900010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900010f6:	2302      	movs	r3, #2
900010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900010fa:	2300      	movs	r3, #0
900010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900010fe:	2300      	movs	r3, #0
90001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
90001102:	2307      	movs	r3, #7
90001104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
90001106:	f107 0314 	add.w	r3, r7, #20
9000110a:	4619      	mov	r1, r3
9000110c:	4811      	ldr	r0, [pc, #68]	; (90001154 <HAL_UART_MspInit+0xcc>)
9000110e:	f000 f9eb 	bl	900014e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
90001112:	f44f 7300 	mov.w	r3, #512	; 0x200
90001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90001118:	2302      	movs	r3, #2
9000111a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000111c:	2300      	movs	r3, #0
9000111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001120:	2300      	movs	r3, #0
90001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
90001124:	2307      	movs	r3, #7
90001126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
90001128:	f107 0314 	add.w	r3, r7, #20
9000112c:	4619      	mov	r1, r3
9000112e:	480a      	ldr	r0, [pc, #40]	; (90001158 <HAL_UART_MspInit+0xd0>)
90001130:	f000 f9da 	bl	900014e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
90001134:	2200      	movs	r2, #0
90001136:	2100      	movs	r1, #0
90001138:	2025      	movs	r0, #37	; 0x25
9000113a:	f000 f99e 	bl	9000147a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
9000113e:	2025      	movs	r0, #37	; 0x25
90001140:	f000 f9b7 	bl	900014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
90001144:	bf00      	nop
90001146:	3728      	adds	r7, #40	; 0x28
90001148:	46bd      	mov	sp, r7
9000114a:	bd80      	pop	{r7, pc}
9000114c:	40011000 	.word	0x40011000
90001150:	40023800 	.word	0x40023800
90001154:	40020400 	.word	0x40020400
90001158:	40020000 	.word	0x40020000

9000115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
9000115c:	f8df d034 	ldr.w	sp, [pc, #52]	; 90001194 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
90001160:	480d      	ldr	r0, [pc, #52]	; (90001198 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
90001162:	490e      	ldr	r1, [pc, #56]	; (9000119c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
90001164:	4a0e      	ldr	r2, [pc, #56]	; (900011a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
90001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
90001168:	e002      	b.n	90001170 <LoopCopyDataInit>

9000116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
9000116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
9000116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
9000116e:	3304      	adds	r3, #4

90001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
90001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
90001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
90001174:	d3f9      	bcc.n	9000116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90001176:	4a0b      	ldr	r2, [pc, #44]	; (900011a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
90001178:	4c0b      	ldr	r4, [pc, #44]	; (900011a8 <LoopFillZerobss+0x26>)
  movs r3, #0
9000117a:	2300      	movs	r3, #0
  b LoopFillZerobss
9000117c:	e001      	b.n	90001182 <LoopFillZerobss>

9000117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
9000117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
90001180:	3204      	adds	r2, #4

90001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
90001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
90001184:	d3fb      	bcc.n	9000117e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
90001186:	f7ff ff19 	bl	90000fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
9000118a:	f001 fcd3 	bl	90002b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
9000118e:	f7ff fe1f 	bl	90000dd0 <main>
  bx  lr    
90001192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
90001194:	20050000 	.word	0x20050000
  ldr r0, =_sdata
90001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
9000119c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
900011a0:	90002be0 	.word	0x90002be0
  ldr r2, =_sbss
900011a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
900011a8:	200000b0 	.word	0x200000b0

900011ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900011ac:	e7fe      	b.n	900011ac <ADC_IRQHandler>
	...

900011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
900011b0:	b580      	push	{r7, lr}
900011b2:	af00      	add	r7, sp, #0
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
900011b4:	4b08      	ldr	r3, [pc, #32]	; (900011d8 <HAL_Init+0x28>)
900011b6:	681b      	ldr	r3, [r3, #0]
900011b8:	4a07      	ldr	r2, [pc, #28]	; (900011d8 <HAL_Init+0x28>)
900011ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900011be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900011c0:	2003      	movs	r0, #3
900011c2:	f000 f94f 	bl	90001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
900011c6:	200f      	movs	r0, #15
900011c8:	f000 f808 	bl	900011dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
900011cc:	f7ff fea8 	bl	90000f20 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
900011d0:	2300      	movs	r3, #0
}
900011d2:	4618      	mov	r0, r3
900011d4:	bd80      	pop	{r7, pc}
900011d6:	bf00      	nop
900011d8:	40023c00 	.word	0x40023c00

900011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
900011dc:	b580      	push	{r7, lr}
900011de:	b082      	sub	sp, #8
900011e0:	af00      	add	r7, sp, #0
900011e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
900011e4:	4b12      	ldr	r3, [pc, #72]	; (90001230 <HAL_InitTick+0x54>)
900011e6:	681a      	ldr	r2, [r3, #0]
900011e8:	4b12      	ldr	r3, [pc, #72]	; (90001234 <HAL_InitTick+0x58>)
900011ea:	781b      	ldrb	r3, [r3, #0]
900011ec:	4619      	mov	r1, r3
900011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
900011f2:	fbb3 f3f1 	udiv	r3, r3, r1
900011f6:	fbb2 f3f3 	udiv	r3, r2, r3
900011fa:	4618      	mov	r0, r3
900011fc:	f000 f967 	bl	900014ce <HAL_SYSTICK_Config>
90001200:	4603      	mov	r3, r0
90001202:	2b00      	cmp	r3, #0
90001204:	d001      	beq.n	9000120a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
90001206:	2301      	movs	r3, #1
90001208:	e00e      	b.n	90001228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
9000120a:	687b      	ldr	r3, [r7, #4]
9000120c:	2b0f      	cmp	r3, #15
9000120e:	d80a      	bhi.n	90001226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
90001210:	2200      	movs	r2, #0
90001212:	6879      	ldr	r1, [r7, #4]
90001214:	f04f 30ff 	mov.w	r0, #4294967295
90001218:	f000 f92f 	bl	9000147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
9000121c:	4a06      	ldr	r2, [pc, #24]	; (90001238 <HAL_InitTick+0x5c>)
9000121e:	687b      	ldr	r3, [r7, #4]
90001220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
90001222:	2300      	movs	r3, #0
90001224:	e000      	b.n	90001228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
90001226:	2301      	movs	r3, #1
}
90001228:	4618      	mov	r0, r3
9000122a:	3708      	adds	r7, #8
9000122c:	46bd      	mov	sp, r7
9000122e:	bd80      	pop	{r7, pc}
90001230:	20000000 	.word	0x20000000
90001234:	20000008 	.word	0x20000008
90001238:	20000004 	.word	0x20000004

9000123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
9000123c:	b480      	push	{r7}
9000123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
90001240:	4b06      	ldr	r3, [pc, #24]	; (9000125c <HAL_IncTick+0x20>)
90001242:	781b      	ldrb	r3, [r3, #0]
90001244:	461a      	mov	r2, r3
90001246:	4b06      	ldr	r3, [pc, #24]	; (90001260 <HAL_IncTick+0x24>)
90001248:	681b      	ldr	r3, [r3, #0]
9000124a:	4413      	add	r3, r2
9000124c:	4a04      	ldr	r2, [pc, #16]	; (90001260 <HAL_IncTick+0x24>)
9000124e:	6013      	str	r3, [r2, #0]
}
90001250:	bf00      	nop
90001252:	46bd      	mov	sp, r7
90001254:	f85d 7b04 	ldr.w	r7, [sp], #4
90001258:	4770      	bx	lr
9000125a:	bf00      	nop
9000125c:	20000008 	.word	0x20000008
90001260:	200000ac 	.word	0x200000ac

90001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
90001264:	b480      	push	{r7}
90001266:	af00      	add	r7, sp, #0
  return uwTick;
90001268:	4b03      	ldr	r3, [pc, #12]	; (90001278 <HAL_GetTick+0x14>)
9000126a:	681b      	ldr	r3, [r3, #0]
}
9000126c:	4618      	mov	r0, r3
9000126e:	46bd      	mov	sp, r7
90001270:	f85d 7b04 	ldr.w	r7, [sp], #4
90001274:	4770      	bx	lr
90001276:	bf00      	nop
90001278:	200000ac 	.word	0x200000ac

9000127c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
9000127c:	b580      	push	{r7, lr}
9000127e:	b084      	sub	sp, #16
90001280:	af00      	add	r7, sp, #0
90001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
90001284:	f7ff ffee 	bl	90001264 <HAL_GetTick>
90001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
9000128a:	687b      	ldr	r3, [r7, #4]
9000128c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
9000128e:	68fb      	ldr	r3, [r7, #12]
90001290:	f1b3 3fff 	cmp.w	r3, #4294967295
90001294:	d005      	beq.n	900012a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
90001296:	4b0a      	ldr	r3, [pc, #40]	; (900012c0 <HAL_Delay+0x44>)
90001298:	781b      	ldrb	r3, [r3, #0]
9000129a:	461a      	mov	r2, r3
9000129c:	68fb      	ldr	r3, [r7, #12]
9000129e:	4413      	add	r3, r2
900012a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
900012a2:	bf00      	nop
900012a4:	f7ff ffde 	bl	90001264 <HAL_GetTick>
900012a8:	4602      	mov	r2, r0
900012aa:	68bb      	ldr	r3, [r7, #8]
900012ac:	1ad3      	subs	r3, r2, r3
900012ae:	68fa      	ldr	r2, [r7, #12]
900012b0:	429a      	cmp	r2, r3
900012b2:	d8f7      	bhi.n	900012a4 <HAL_Delay+0x28>
  {
  }
}
900012b4:	bf00      	nop
900012b6:	bf00      	nop
900012b8:	3710      	adds	r7, #16
900012ba:	46bd      	mov	sp, r7
900012bc:	bd80      	pop	{r7, pc}
900012be:	bf00      	nop
900012c0:	20000008 	.word	0x20000008

900012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
900012c4:	b480      	push	{r7}
900012c6:	b085      	sub	sp, #20
900012c8:	af00      	add	r7, sp, #0
900012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
900012cc:	687b      	ldr	r3, [r7, #4]
900012ce:	f003 0307 	and.w	r3, r3, #7
900012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900012d4:	4b0b      	ldr	r3, [pc, #44]	; (90001304 <__NVIC_SetPriorityGrouping+0x40>)
900012d6:	68db      	ldr	r3, [r3, #12]
900012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900012da:	68ba      	ldr	r2, [r7, #8]
900012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
900012e0:	4013      	ands	r3, r2
900012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900012e4:	68fb      	ldr	r3, [r7, #12]
900012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900012e8:	68bb      	ldr	r3, [r7, #8]
900012ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
900012ec:	4b06      	ldr	r3, [pc, #24]	; (90001308 <__NVIC_SetPriorityGrouping+0x44>)
900012ee:	4313      	orrs	r3, r2
900012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
900012f2:	4a04      	ldr	r2, [pc, #16]	; (90001304 <__NVIC_SetPriorityGrouping+0x40>)
900012f4:	68bb      	ldr	r3, [r7, #8]
900012f6:	60d3      	str	r3, [r2, #12]
}
900012f8:	bf00      	nop
900012fa:	3714      	adds	r7, #20
900012fc:	46bd      	mov	sp, r7
900012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
90001302:	4770      	bx	lr
90001304:	e000ed00 	.word	0xe000ed00
90001308:	05fa0000 	.word	0x05fa0000

9000130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
9000130c:	b480      	push	{r7}
9000130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90001310:	4b04      	ldr	r3, [pc, #16]	; (90001324 <__NVIC_GetPriorityGrouping+0x18>)
90001312:	68db      	ldr	r3, [r3, #12]
90001314:	0a1b      	lsrs	r3, r3, #8
90001316:	f003 0307 	and.w	r3, r3, #7
}
9000131a:	4618      	mov	r0, r3
9000131c:	46bd      	mov	sp, r7
9000131e:	f85d 7b04 	ldr.w	r7, [sp], #4
90001322:	4770      	bx	lr
90001324:	e000ed00 	.word	0xe000ed00

90001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
90001328:	b480      	push	{r7}
9000132a:	b083      	sub	sp, #12
9000132c:	af00      	add	r7, sp, #0
9000132e:	4603      	mov	r3, r0
90001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
90001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001336:	2b00      	cmp	r3, #0
90001338:	db0b      	blt.n	90001352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000133a:	79fb      	ldrb	r3, [r7, #7]
9000133c:	f003 021f 	and.w	r2, r3, #31
90001340:	4907      	ldr	r1, [pc, #28]	; (90001360 <__NVIC_EnableIRQ+0x38>)
90001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001346:	095b      	lsrs	r3, r3, #5
90001348:	2001      	movs	r0, #1
9000134a:	fa00 f202 	lsl.w	r2, r0, r2
9000134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
90001352:	bf00      	nop
90001354:	370c      	adds	r7, #12
90001356:	46bd      	mov	sp, r7
90001358:	f85d 7b04 	ldr.w	r7, [sp], #4
9000135c:	4770      	bx	lr
9000135e:	bf00      	nop
90001360:	e000e100 	.word	0xe000e100

90001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
90001364:	b480      	push	{r7}
90001366:	b083      	sub	sp, #12
90001368:	af00      	add	r7, sp, #0
9000136a:	4603      	mov	r3, r0
9000136c:	6039      	str	r1, [r7, #0]
9000136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
90001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001374:	2b00      	cmp	r3, #0
90001376:	db0a      	blt.n	9000138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90001378:	683b      	ldr	r3, [r7, #0]
9000137a:	b2da      	uxtb	r2, r3
9000137c:	490c      	ldr	r1, [pc, #48]	; (900013b0 <__NVIC_SetPriority+0x4c>)
9000137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
90001382:	0112      	lsls	r2, r2, #4
90001384:	b2d2      	uxtb	r2, r2
90001386:	440b      	add	r3, r1
90001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
9000138c:	e00a      	b.n	900013a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000138e:	683b      	ldr	r3, [r7, #0]
90001390:	b2da      	uxtb	r2, r3
90001392:	4908      	ldr	r1, [pc, #32]	; (900013b4 <__NVIC_SetPriority+0x50>)
90001394:	79fb      	ldrb	r3, [r7, #7]
90001396:	f003 030f 	and.w	r3, r3, #15
9000139a:	3b04      	subs	r3, #4
9000139c:	0112      	lsls	r2, r2, #4
9000139e:	b2d2      	uxtb	r2, r2
900013a0:	440b      	add	r3, r1
900013a2:	761a      	strb	r2, [r3, #24]
}
900013a4:	bf00      	nop
900013a6:	370c      	adds	r7, #12
900013a8:	46bd      	mov	sp, r7
900013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
900013ae:	4770      	bx	lr
900013b0:	e000e100 	.word	0xe000e100
900013b4:	e000ed00 	.word	0xe000ed00

900013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
900013b8:	b480      	push	{r7}
900013ba:	b089      	sub	sp, #36	; 0x24
900013bc:	af00      	add	r7, sp, #0
900013be:	60f8      	str	r0, [r7, #12]
900013c0:	60b9      	str	r1, [r7, #8]
900013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
900013c4:	68fb      	ldr	r3, [r7, #12]
900013c6:	f003 0307 	and.w	r3, r3, #7
900013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900013cc:	69fb      	ldr	r3, [r7, #28]
900013ce:	f1c3 0307 	rsb	r3, r3, #7
900013d2:	2b04      	cmp	r3, #4
900013d4:	bf28      	it	cs
900013d6:	2304      	movcs	r3, #4
900013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900013da:	69fb      	ldr	r3, [r7, #28]
900013dc:	3304      	adds	r3, #4
900013de:	2b06      	cmp	r3, #6
900013e0:	d902      	bls.n	900013e8 <NVIC_EncodePriority+0x30>
900013e2:	69fb      	ldr	r3, [r7, #28]
900013e4:	3b03      	subs	r3, #3
900013e6:	e000      	b.n	900013ea <NVIC_EncodePriority+0x32>
900013e8:	2300      	movs	r3, #0
900013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900013ec:	f04f 32ff 	mov.w	r2, #4294967295
900013f0:	69bb      	ldr	r3, [r7, #24]
900013f2:	fa02 f303 	lsl.w	r3, r2, r3
900013f6:	43da      	mvns	r2, r3
900013f8:	68bb      	ldr	r3, [r7, #8]
900013fa:	401a      	ands	r2, r3
900013fc:	697b      	ldr	r3, [r7, #20]
900013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90001400:	f04f 31ff 	mov.w	r1, #4294967295
90001404:	697b      	ldr	r3, [r7, #20]
90001406:	fa01 f303 	lsl.w	r3, r1, r3
9000140a:	43d9      	mvns	r1, r3
9000140c:	687b      	ldr	r3, [r7, #4]
9000140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90001410:	4313      	orrs	r3, r2
         );
}
90001412:	4618      	mov	r0, r3
90001414:	3724      	adds	r7, #36	; 0x24
90001416:	46bd      	mov	sp, r7
90001418:	f85d 7b04 	ldr.w	r7, [sp], #4
9000141c:	4770      	bx	lr
	...

90001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
90001420:	b580      	push	{r7, lr}
90001422:	b082      	sub	sp, #8
90001424:	af00      	add	r7, sp, #0
90001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
90001428:	687b      	ldr	r3, [r7, #4]
9000142a:	3b01      	subs	r3, #1
9000142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
90001430:	d301      	bcc.n	90001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
90001432:	2301      	movs	r3, #1
90001434:	e00f      	b.n	90001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
90001436:	4a0a      	ldr	r2, [pc, #40]	; (90001460 <SysTick_Config+0x40>)
90001438:	687b      	ldr	r3, [r7, #4]
9000143a:	3b01      	subs	r3, #1
9000143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
9000143e:	210f      	movs	r1, #15
90001440:	f04f 30ff 	mov.w	r0, #4294967295
90001444:	f7ff ff8e 	bl	90001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
90001448:	4b05      	ldr	r3, [pc, #20]	; (90001460 <SysTick_Config+0x40>)
9000144a:	2200      	movs	r2, #0
9000144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
9000144e:	4b04      	ldr	r3, [pc, #16]	; (90001460 <SysTick_Config+0x40>)
90001450:	2207      	movs	r2, #7
90001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
90001454:	2300      	movs	r3, #0
}
90001456:	4618      	mov	r0, r3
90001458:	3708      	adds	r7, #8
9000145a:	46bd      	mov	sp, r7
9000145c:	bd80      	pop	{r7, pc}
9000145e:	bf00      	nop
90001460:	e000e010 	.word	0xe000e010

90001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90001464:	b580      	push	{r7, lr}
90001466:	b082      	sub	sp, #8
90001468:	af00      	add	r7, sp, #0
9000146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
9000146c:	6878      	ldr	r0, [r7, #4]
9000146e:	f7ff ff29 	bl	900012c4 <__NVIC_SetPriorityGrouping>
}
90001472:	bf00      	nop
90001474:	3708      	adds	r7, #8
90001476:	46bd      	mov	sp, r7
90001478:	bd80      	pop	{r7, pc}

9000147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
9000147a:	b580      	push	{r7, lr}
9000147c:	b086      	sub	sp, #24
9000147e:	af00      	add	r7, sp, #0
90001480:	4603      	mov	r3, r0
90001482:	60b9      	str	r1, [r7, #8]
90001484:	607a      	str	r2, [r7, #4]
90001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
90001488:	2300      	movs	r3, #0
9000148a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
9000148c:	f7ff ff3e 	bl	9000130c <__NVIC_GetPriorityGrouping>
90001490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
90001492:	687a      	ldr	r2, [r7, #4]
90001494:	68b9      	ldr	r1, [r7, #8]
90001496:	6978      	ldr	r0, [r7, #20]
90001498:	f7ff ff8e 	bl	900013b8 <NVIC_EncodePriority>
9000149c:	4602      	mov	r2, r0
9000149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
900014a2:	4611      	mov	r1, r2
900014a4:	4618      	mov	r0, r3
900014a6:	f7ff ff5d 	bl	90001364 <__NVIC_SetPriority>
}
900014aa:	bf00      	nop
900014ac:	3718      	adds	r7, #24
900014ae:	46bd      	mov	sp, r7
900014b0:	bd80      	pop	{r7, pc}

900014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
900014b2:	b580      	push	{r7, lr}
900014b4:	b082      	sub	sp, #8
900014b6:	af00      	add	r7, sp, #0
900014b8:	4603      	mov	r3, r0
900014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
900014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
900014c0:	4618      	mov	r0, r3
900014c2:	f7ff ff31 	bl	90001328 <__NVIC_EnableIRQ>
}
900014c6:	bf00      	nop
900014c8:	3708      	adds	r7, #8
900014ca:	46bd      	mov	sp, r7
900014cc:	bd80      	pop	{r7, pc}

900014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
900014ce:	b580      	push	{r7, lr}
900014d0:	b082      	sub	sp, #8
900014d2:	af00      	add	r7, sp, #0
900014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
900014d6:	6878      	ldr	r0, [r7, #4]
900014d8:	f7ff ffa2 	bl	90001420 <SysTick_Config>
900014dc:	4603      	mov	r3, r0
}
900014de:	4618      	mov	r0, r3
900014e0:	3708      	adds	r7, #8
900014e2:	46bd      	mov	sp, r7
900014e4:	bd80      	pop	{r7, pc}
	...

900014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
900014e8:	b480      	push	{r7}
900014ea:	b089      	sub	sp, #36	; 0x24
900014ec:	af00      	add	r7, sp, #0
900014ee:	6078      	str	r0, [r7, #4]
900014f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
900014f2:	2300      	movs	r3, #0
900014f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
900014f6:	2300      	movs	r3, #0
900014f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
900014fa:	2300      	movs	r3, #0
900014fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
900014fe:	2300      	movs	r3, #0
90001500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
90001502:	2300      	movs	r3, #0
90001504:	61fb      	str	r3, [r7, #28]
90001506:	e175      	b.n	900017f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
90001508:	2201      	movs	r2, #1
9000150a:	69fb      	ldr	r3, [r7, #28]
9000150c:	fa02 f303 	lsl.w	r3, r2, r3
90001510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
90001512:	683b      	ldr	r3, [r7, #0]
90001514:	681b      	ldr	r3, [r3, #0]
90001516:	697a      	ldr	r2, [r7, #20]
90001518:	4013      	ands	r3, r2
9000151a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
9000151c:	693a      	ldr	r2, [r7, #16]
9000151e:	697b      	ldr	r3, [r7, #20]
90001520:	429a      	cmp	r2, r3
90001522:	f040 8164 	bne.w	900017ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
90001526:	683b      	ldr	r3, [r7, #0]
90001528:	685b      	ldr	r3, [r3, #4]
9000152a:	2b01      	cmp	r3, #1
9000152c:	d00b      	beq.n	90001546 <HAL_GPIO_Init+0x5e>
9000152e:	683b      	ldr	r3, [r7, #0]
90001530:	685b      	ldr	r3, [r3, #4]
90001532:	2b02      	cmp	r3, #2
90001534:	d007      	beq.n	90001546 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
90001536:	683b      	ldr	r3, [r7, #0]
90001538:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
9000153a:	2b11      	cmp	r3, #17
9000153c:	d003      	beq.n	90001546 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
9000153e:	683b      	ldr	r3, [r7, #0]
90001540:	685b      	ldr	r3, [r3, #4]
90001542:	2b12      	cmp	r3, #18
90001544:	d130      	bne.n	900015a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
90001546:	687b      	ldr	r3, [r7, #4]
90001548:	689b      	ldr	r3, [r3, #8]
9000154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
9000154c:	69fb      	ldr	r3, [r7, #28]
9000154e:	005b      	lsls	r3, r3, #1
90001550:	2203      	movs	r2, #3
90001552:	fa02 f303 	lsl.w	r3, r2, r3
90001556:	43db      	mvns	r3, r3
90001558:	69ba      	ldr	r2, [r7, #24]
9000155a:	4013      	ands	r3, r2
9000155c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
9000155e:	683b      	ldr	r3, [r7, #0]
90001560:	68da      	ldr	r2, [r3, #12]
90001562:	69fb      	ldr	r3, [r7, #28]
90001564:	005b      	lsls	r3, r3, #1
90001566:	fa02 f303 	lsl.w	r3, r2, r3
9000156a:	69ba      	ldr	r2, [r7, #24]
9000156c:	4313      	orrs	r3, r2
9000156e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
90001570:	687b      	ldr	r3, [r7, #4]
90001572:	69ba      	ldr	r2, [r7, #24]
90001574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
90001576:	687b      	ldr	r3, [r7, #4]
90001578:	685b      	ldr	r3, [r3, #4]
9000157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
9000157c:	2201      	movs	r2, #1
9000157e:	69fb      	ldr	r3, [r7, #28]
90001580:	fa02 f303 	lsl.w	r3, r2, r3
90001584:	43db      	mvns	r3, r3
90001586:	69ba      	ldr	r2, [r7, #24]
90001588:	4013      	ands	r3, r2
9000158a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
9000158c:	683b      	ldr	r3, [r7, #0]
9000158e:	685b      	ldr	r3, [r3, #4]
90001590:	091b      	lsrs	r3, r3, #4
90001592:	f003 0201 	and.w	r2, r3, #1
90001596:	69fb      	ldr	r3, [r7, #28]
90001598:	fa02 f303 	lsl.w	r3, r2, r3
9000159c:	69ba      	ldr	r2, [r7, #24]
9000159e:	4313      	orrs	r3, r2
900015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
900015a2:	687b      	ldr	r3, [r7, #4]
900015a4:	69ba      	ldr	r2, [r7, #24]
900015a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
900015a8:	687b      	ldr	r3, [r7, #4]
900015aa:	68db      	ldr	r3, [r3, #12]
900015ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
900015ae:	69fb      	ldr	r3, [r7, #28]
900015b0:	005b      	lsls	r3, r3, #1
900015b2:	2203      	movs	r2, #3
900015b4:	fa02 f303 	lsl.w	r3, r2, r3
900015b8:	43db      	mvns	r3, r3
900015ba:	69ba      	ldr	r2, [r7, #24]
900015bc:	4013      	ands	r3, r2
900015be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
900015c0:	683b      	ldr	r3, [r7, #0]
900015c2:	689a      	ldr	r2, [r3, #8]
900015c4:	69fb      	ldr	r3, [r7, #28]
900015c6:	005b      	lsls	r3, r3, #1
900015c8:	fa02 f303 	lsl.w	r3, r2, r3
900015cc:	69ba      	ldr	r2, [r7, #24]
900015ce:	4313      	orrs	r3, r2
900015d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
900015d2:	687b      	ldr	r3, [r7, #4]
900015d4:	69ba      	ldr	r2, [r7, #24]
900015d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
900015d8:	683b      	ldr	r3, [r7, #0]
900015da:	685b      	ldr	r3, [r3, #4]
900015dc:	2b02      	cmp	r3, #2
900015de:	d003      	beq.n	900015e8 <HAL_GPIO_Init+0x100>
900015e0:	683b      	ldr	r3, [r7, #0]
900015e2:	685b      	ldr	r3, [r3, #4]
900015e4:	2b12      	cmp	r3, #18
900015e6:	d123      	bne.n	90001630 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
900015e8:	69fb      	ldr	r3, [r7, #28]
900015ea:	08da      	lsrs	r2, r3, #3
900015ec:	687b      	ldr	r3, [r7, #4]
900015ee:	3208      	adds	r2, #8
900015f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
900015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
900015f6:	69fb      	ldr	r3, [r7, #28]
900015f8:	f003 0307 	and.w	r3, r3, #7
900015fc:	009b      	lsls	r3, r3, #2
900015fe:	220f      	movs	r2, #15
90001600:	fa02 f303 	lsl.w	r3, r2, r3
90001604:	43db      	mvns	r3, r3
90001606:	69ba      	ldr	r2, [r7, #24]
90001608:	4013      	ands	r3, r2
9000160a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
9000160c:	683b      	ldr	r3, [r7, #0]
9000160e:	691a      	ldr	r2, [r3, #16]
90001610:	69fb      	ldr	r3, [r7, #28]
90001612:	f003 0307 	and.w	r3, r3, #7
90001616:	009b      	lsls	r3, r3, #2
90001618:	fa02 f303 	lsl.w	r3, r2, r3
9000161c:	69ba      	ldr	r2, [r7, #24]
9000161e:	4313      	orrs	r3, r2
90001620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
90001622:	69fb      	ldr	r3, [r7, #28]
90001624:	08da      	lsrs	r2, r3, #3
90001626:	687b      	ldr	r3, [r7, #4]
90001628:	3208      	adds	r2, #8
9000162a:	69b9      	ldr	r1, [r7, #24]
9000162c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
90001630:	687b      	ldr	r3, [r7, #4]
90001632:	681b      	ldr	r3, [r3, #0]
90001634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
90001636:	69fb      	ldr	r3, [r7, #28]
90001638:	005b      	lsls	r3, r3, #1
9000163a:	2203      	movs	r2, #3
9000163c:	fa02 f303 	lsl.w	r3, r2, r3
90001640:	43db      	mvns	r3, r3
90001642:	69ba      	ldr	r2, [r7, #24]
90001644:	4013      	ands	r3, r2
90001646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
90001648:	683b      	ldr	r3, [r7, #0]
9000164a:	685b      	ldr	r3, [r3, #4]
9000164c:	f003 0203 	and.w	r2, r3, #3
90001650:	69fb      	ldr	r3, [r7, #28]
90001652:	005b      	lsls	r3, r3, #1
90001654:	fa02 f303 	lsl.w	r3, r2, r3
90001658:	69ba      	ldr	r2, [r7, #24]
9000165a:	4313      	orrs	r3, r2
9000165c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
9000165e:	687b      	ldr	r3, [r7, #4]
90001660:	69ba      	ldr	r2, [r7, #24]
90001662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
90001664:	683b      	ldr	r3, [r7, #0]
90001666:	685b      	ldr	r3, [r3, #4]
90001668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
9000166c:	2b00      	cmp	r3, #0
9000166e:	f000 80be 	beq.w	900017ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90001672:	4b66      	ldr	r3, [pc, #408]	; (9000180c <HAL_GPIO_Init+0x324>)
90001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001676:	4a65      	ldr	r2, [pc, #404]	; (9000180c <HAL_GPIO_Init+0x324>)
90001678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
9000167c:	6453      	str	r3, [r2, #68]	; 0x44
9000167e:	4b63      	ldr	r3, [pc, #396]	; (9000180c <HAL_GPIO_Init+0x324>)
90001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90001686:	60fb      	str	r3, [r7, #12]
90001688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
9000168a:	4a61      	ldr	r2, [pc, #388]	; (90001810 <HAL_GPIO_Init+0x328>)
9000168c:	69fb      	ldr	r3, [r7, #28]
9000168e:	089b      	lsrs	r3, r3, #2
90001690:	3302      	adds	r3, #2
90001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
90001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
90001698:	69fb      	ldr	r3, [r7, #28]
9000169a:	f003 0303 	and.w	r3, r3, #3
9000169e:	009b      	lsls	r3, r3, #2
900016a0:	220f      	movs	r2, #15
900016a2:	fa02 f303 	lsl.w	r3, r2, r3
900016a6:	43db      	mvns	r3, r3
900016a8:	69ba      	ldr	r2, [r7, #24]
900016aa:	4013      	ands	r3, r2
900016ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
900016ae:	687b      	ldr	r3, [r7, #4]
900016b0:	4a58      	ldr	r2, [pc, #352]	; (90001814 <HAL_GPIO_Init+0x32c>)
900016b2:	4293      	cmp	r3, r2
900016b4:	d037      	beq.n	90001726 <HAL_GPIO_Init+0x23e>
900016b6:	687b      	ldr	r3, [r7, #4]
900016b8:	4a57      	ldr	r2, [pc, #348]	; (90001818 <HAL_GPIO_Init+0x330>)
900016ba:	4293      	cmp	r3, r2
900016bc:	d031      	beq.n	90001722 <HAL_GPIO_Init+0x23a>
900016be:	687b      	ldr	r3, [r7, #4]
900016c0:	4a56      	ldr	r2, [pc, #344]	; (9000181c <HAL_GPIO_Init+0x334>)
900016c2:	4293      	cmp	r3, r2
900016c4:	d02b      	beq.n	9000171e <HAL_GPIO_Init+0x236>
900016c6:	687b      	ldr	r3, [r7, #4]
900016c8:	4a55      	ldr	r2, [pc, #340]	; (90001820 <HAL_GPIO_Init+0x338>)
900016ca:	4293      	cmp	r3, r2
900016cc:	d025      	beq.n	9000171a <HAL_GPIO_Init+0x232>
900016ce:	687b      	ldr	r3, [r7, #4]
900016d0:	4a54      	ldr	r2, [pc, #336]	; (90001824 <HAL_GPIO_Init+0x33c>)
900016d2:	4293      	cmp	r3, r2
900016d4:	d01f      	beq.n	90001716 <HAL_GPIO_Init+0x22e>
900016d6:	687b      	ldr	r3, [r7, #4]
900016d8:	4a53      	ldr	r2, [pc, #332]	; (90001828 <HAL_GPIO_Init+0x340>)
900016da:	4293      	cmp	r3, r2
900016dc:	d019      	beq.n	90001712 <HAL_GPIO_Init+0x22a>
900016de:	687b      	ldr	r3, [r7, #4]
900016e0:	4a52      	ldr	r2, [pc, #328]	; (9000182c <HAL_GPIO_Init+0x344>)
900016e2:	4293      	cmp	r3, r2
900016e4:	d013      	beq.n	9000170e <HAL_GPIO_Init+0x226>
900016e6:	687b      	ldr	r3, [r7, #4]
900016e8:	4a51      	ldr	r2, [pc, #324]	; (90001830 <HAL_GPIO_Init+0x348>)
900016ea:	4293      	cmp	r3, r2
900016ec:	d00d      	beq.n	9000170a <HAL_GPIO_Init+0x222>
900016ee:	687b      	ldr	r3, [r7, #4]
900016f0:	4a50      	ldr	r2, [pc, #320]	; (90001834 <HAL_GPIO_Init+0x34c>)
900016f2:	4293      	cmp	r3, r2
900016f4:	d007      	beq.n	90001706 <HAL_GPIO_Init+0x21e>
900016f6:	687b      	ldr	r3, [r7, #4]
900016f8:	4a4f      	ldr	r2, [pc, #316]	; (90001838 <HAL_GPIO_Init+0x350>)
900016fa:	4293      	cmp	r3, r2
900016fc:	d101      	bne.n	90001702 <HAL_GPIO_Init+0x21a>
900016fe:	2309      	movs	r3, #9
90001700:	e012      	b.n	90001728 <HAL_GPIO_Init+0x240>
90001702:	230a      	movs	r3, #10
90001704:	e010      	b.n	90001728 <HAL_GPIO_Init+0x240>
90001706:	2308      	movs	r3, #8
90001708:	e00e      	b.n	90001728 <HAL_GPIO_Init+0x240>
9000170a:	2307      	movs	r3, #7
9000170c:	e00c      	b.n	90001728 <HAL_GPIO_Init+0x240>
9000170e:	2306      	movs	r3, #6
90001710:	e00a      	b.n	90001728 <HAL_GPIO_Init+0x240>
90001712:	2305      	movs	r3, #5
90001714:	e008      	b.n	90001728 <HAL_GPIO_Init+0x240>
90001716:	2304      	movs	r3, #4
90001718:	e006      	b.n	90001728 <HAL_GPIO_Init+0x240>
9000171a:	2303      	movs	r3, #3
9000171c:	e004      	b.n	90001728 <HAL_GPIO_Init+0x240>
9000171e:	2302      	movs	r3, #2
90001720:	e002      	b.n	90001728 <HAL_GPIO_Init+0x240>
90001722:	2301      	movs	r3, #1
90001724:	e000      	b.n	90001728 <HAL_GPIO_Init+0x240>
90001726:	2300      	movs	r3, #0
90001728:	69fa      	ldr	r2, [r7, #28]
9000172a:	f002 0203 	and.w	r2, r2, #3
9000172e:	0092      	lsls	r2, r2, #2
90001730:	4093      	lsls	r3, r2
90001732:	69ba      	ldr	r2, [r7, #24]
90001734:	4313      	orrs	r3, r2
90001736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
90001738:	4935      	ldr	r1, [pc, #212]	; (90001810 <HAL_GPIO_Init+0x328>)
9000173a:	69fb      	ldr	r3, [r7, #28]
9000173c:	089b      	lsrs	r3, r3, #2
9000173e:	3302      	adds	r3, #2
90001740:	69ba      	ldr	r2, [r7, #24]
90001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
90001746:	4b3d      	ldr	r3, [pc, #244]	; (9000183c <HAL_GPIO_Init+0x354>)
90001748:	681b      	ldr	r3, [r3, #0]
9000174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
9000174c:	693b      	ldr	r3, [r7, #16]
9000174e:	43db      	mvns	r3, r3
90001750:	69ba      	ldr	r2, [r7, #24]
90001752:	4013      	ands	r3, r2
90001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
90001756:	683b      	ldr	r3, [r7, #0]
90001758:	685b      	ldr	r3, [r3, #4]
9000175a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
9000175e:	2b00      	cmp	r3, #0
90001760:	d003      	beq.n	9000176a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
90001762:	69ba      	ldr	r2, [r7, #24]
90001764:	693b      	ldr	r3, [r7, #16]
90001766:	4313      	orrs	r3, r2
90001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
9000176a:	4a34      	ldr	r2, [pc, #208]	; (9000183c <HAL_GPIO_Init+0x354>)
9000176c:	69bb      	ldr	r3, [r7, #24]
9000176e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
90001770:	4b32      	ldr	r3, [pc, #200]	; (9000183c <HAL_GPIO_Init+0x354>)
90001772:	685b      	ldr	r3, [r3, #4]
90001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
90001776:	693b      	ldr	r3, [r7, #16]
90001778:	43db      	mvns	r3, r3
9000177a:	69ba      	ldr	r2, [r7, #24]
9000177c:	4013      	ands	r3, r2
9000177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
90001780:	683b      	ldr	r3, [r7, #0]
90001782:	685b      	ldr	r3, [r3, #4]
90001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001788:	2b00      	cmp	r3, #0
9000178a:	d003      	beq.n	90001794 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
9000178c:	69ba      	ldr	r2, [r7, #24]
9000178e:	693b      	ldr	r3, [r7, #16]
90001790:	4313      	orrs	r3, r2
90001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
90001794:	4a29      	ldr	r2, [pc, #164]	; (9000183c <HAL_GPIO_Init+0x354>)
90001796:	69bb      	ldr	r3, [r7, #24]
90001798:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
9000179a:	4b28      	ldr	r3, [pc, #160]	; (9000183c <HAL_GPIO_Init+0x354>)
9000179c:	689b      	ldr	r3, [r3, #8]
9000179e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
900017a0:	693b      	ldr	r3, [r7, #16]
900017a2:	43db      	mvns	r3, r3
900017a4:	69ba      	ldr	r2, [r7, #24]
900017a6:	4013      	ands	r3, r2
900017a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
900017aa:	683b      	ldr	r3, [r7, #0]
900017ac:	685b      	ldr	r3, [r3, #4]
900017ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
900017b2:	2b00      	cmp	r3, #0
900017b4:	d003      	beq.n	900017be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
900017b6:	69ba      	ldr	r2, [r7, #24]
900017b8:	693b      	ldr	r3, [r7, #16]
900017ba:	4313      	orrs	r3, r2
900017bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
900017be:	4a1f      	ldr	r2, [pc, #124]	; (9000183c <HAL_GPIO_Init+0x354>)
900017c0:	69bb      	ldr	r3, [r7, #24]
900017c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
900017c4:	4b1d      	ldr	r3, [pc, #116]	; (9000183c <HAL_GPIO_Init+0x354>)
900017c6:	68db      	ldr	r3, [r3, #12]
900017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
900017ca:	693b      	ldr	r3, [r7, #16]
900017cc:	43db      	mvns	r3, r3
900017ce:	69ba      	ldr	r2, [r7, #24]
900017d0:	4013      	ands	r3, r2
900017d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
900017d4:	683b      	ldr	r3, [r7, #0]
900017d6:	685b      	ldr	r3, [r3, #4]
900017d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
900017dc:	2b00      	cmp	r3, #0
900017de:	d003      	beq.n	900017e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
900017e0:	69ba      	ldr	r2, [r7, #24]
900017e2:	693b      	ldr	r3, [r7, #16]
900017e4:	4313      	orrs	r3, r2
900017e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
900017e8:	4a14      	ldr	r2, [pc, #80]	; (9000183c <HAL_GPIO_Init+0x354>)
900017ea:	69bb      	ldr	r3, [r7, #24]
900017ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
900017ee:	69fb      	ldr	r3, [r7, #28]
900017f0:	3301      	adds	r3, #1
900017f2:	61fb      	str	r3, [r7, #28]
900017f4:	69fb      	ldr	r3, [r7, #28]
900017f6:	2b0f      	cmp	r3, #15
900017f8:	f67f ae86 	bls.w	90001508 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
900017fc:	bf00      	nop
900017fe:	bf00      	nop
90001800:	3724      	adds	r7, #36	; 0x24
90001802:	46bd      	mov	sp, r7
90001804:	f85d 7b04 	ldr.w	r7, [sp], #4
90001808:	4770      	bx	lr
9000180a:	bf00      	nop
9000180c:	40023800 	.word	0x40023800
90001810:	40013800 	.word	0x40013800
90001814:	40020000 	.word	0x40020000
90001818:	40020400 	.word	0x40020400
9000181c:	40020800 	.word	0x40020800
90001820:	40020c00 	.word	0x40020c00
90001824:	40021000 	.word	0x40021000
90001828:	40021400 	.word	0x40021400
9000182c:	40021800 	.word	0x40021800
90001830:	40021c00 	.word	0x40021c00
90001834:	40022000 	.word	0x40022000
90001838:	40022400 	.word	0x40022400
9000183c:	40013c00 	.word	0x40013c00

90001840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90001840:	b480      	push	{r7}
90001842:	b083      	sub	sp, #12
90001844:	af00      	add	r7, sp, #0
90001846:	6078      	str	r0, [r7, #4]
90001848:	460b      	mov	r3, r1
9000184a:	807b      	strh	r3, [r7, #2]
9000184c:	4613      	mov	r3, r2
9000184e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
90001850:	787b      	ldrb	r3, [r7, #1]
90001852:	2b00      	cmp	r3, #0
90001854:	d003      	beq.n	9000185e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
90001856:	887a      	ldrh	r2, [r7, #2]
90001858:	687b      	ldr	r3, [r7, #4]
9000185a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
9000185c:	e003      	b.n	90001866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
9000185e:	887b      	ldrh	r3, [r7, #2]
90001860:	041a      	lsls	r2, r3, #16
90001862:	687b      	ldr	r3, [r7, #4]
90001864:	619a      	str	r2, [r3, #24]
}
90001866:	bf00      	nop
90001868:	370c      	adds	r7, #12
9000186a:	46bd      	mov	sp, r7
9000186c:	f85d 7b04 	ldr.w	r7, [sp], #4
90001870:	4770      	bx	lr
	...

90001874 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
90001874:	b580      	push	{r7, lr}
90001876:	b082      	sub	sp, #8
90001878:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
9000187a:	2300      	movs	r3, #0
9000187c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
9000187e:	4b23      	ldr	r3, [pc, #140]	; (9000190c <HAL_PWREx_EnableOverDrive+0x98>)
90001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001882:	4a22      	ldr	r2, [pc, #136]	; (9000190c <HAL_PWREx_EnableOverDrive+0x98>)
90001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90001888:	6413      	str	r3, [r2, #64]	; 0x40
9000188a:	4b20      	ldr	r3, [pc, #128]	; (9000190c <HAL_PWREx_EnableOverDrive+0x98>)
9000188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90001892:	603b      	str	r3, [r7, #0]
90001894:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
90001896:	4b1e      	ldr	r3, [pc, #120]	; (90001910 <HAL_PWREx_EnableOverDrive+0x9c>)
90001898:	681b      	ldr	r3, [r3, #0]
9000189a:	4a1d      	ldr	r2, [pc, #116]	; (90001910 <HAL_PWREx_EnableOverDrive+0x9c>)
9000189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900018a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
900018a2:	f7ff fcdf 	bl	90001264 <HAL_GetTick>
900018a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
900018a8:	e009      	b.n	900018be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
900018aa:	f7ff fcdb 	bl	90001264 <HAL_GetTick>
900018ae:	4602      	mov	r2, r0
900018b0:	687b      	ldr	r3, [r7, #4]
900018b2:	1ad3      	subs	r3, r2, r3
900018b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
900018b8:	d901      	bls.n	900018be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
900018ba:	2303      	movs	r3, #3
900018bc:	e022      	b.n	90001904 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
900018be:	4b14      	ldr	r3, [pc, #80]	; (90001910 <HAL_PWREx_EnableOverDrive+0x9c>)
900018c0:	685b      	ldr	r3, [r3, #4]
900018c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900018c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900018ca:	d1ee      	bne.n	900018aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
900018cc:	4b10      	ldr	r3, [pc, #64]	; (90001910 <HAL_PWREx_EnableOverDrive+0x9c>)
900018ce:	681b      	ldr	r3, [r3, #0]
900018d0:	4a0f      	ldr	r2, [pc, #60]	; (90001910 <HAL_PWREx_EnableOverDrive+0x9c>)
900018d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900018d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
900018d8:	f7ff fcc4 	bl	90001264 <HAL_GetTick>
900018dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
900018de:	e009      	b.n	900018f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
900018e0:	f7ff fcc0 	bl	90001264 <HAL_GetTick>
900018e4:	4602      	mov	r2, r0
900018e6:	687b      	ldr	r3, [r7, #4]
900018e8:	1ad3      	subs	r3, r2, r3
900018ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
900018ee:	d901      	bls.n	900018f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
900018f0:	2303      	movs	r3, #3
900018f2:	e007      	b.n	90001904 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
900018f4:	4b06      	ldr	r3, [pc, #24]	; (90001910 <HAL_PWREx_EnableOverDrive+0x9c>)
900018f6:	685b      	ldr	r3, [r3, #4]
900018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900018fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
90001900:	d1ee      	bne.n	900018e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
90001902:	2300      	movs	r3, #0
}
90001904:	4618      	mov	r0, r3
90001906:	3708      	adds	r7, #8
90001908:	46bd      	mov	sp, r7
9000190a:	bd80      	pop	{r7, pc}
9000190c:	40023800 	.word	0x40023800
90001910:	40007000 	.word	0x40007000

90001914 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
90001914:	b580      	push	{r7, lr}
90001916:	b086      	sub	sp, #24
90001918:	af00      	add	r7, sp, #0
9000191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
9000191c:	2300      	movs	r3, #0
9000191e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
90001920:	687b      	ldr	r3, [r7, #4]
90001922:	2b00      	cmp	r3, #0
90001924:	d101      	bne.n	9000192a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
90001926:	2301      	movs	r3, #1
90001928:	e291      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000192a:	687b      	ldr	r3, [r7, #4]
9000192c:	681b      	ldr	r3, [r3, #0]
9000192e:	f003 0301 	and.w	r3, r3, #1
90001932:	2b00      	cmp	r3, #0
90001934:	f000 8087 	beq.w	90001a46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
90001938:	4b96      	ldr	r3, [pc, #600]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
9000193a:	689b      	ldr	r3, [r3, #8]
9000193c:	f003 030c 	and.w	r3, r3, #12
90001940:	2b04      	cmp	r3, #4
90001942:	d00c      	beq.n	9000195e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
90001944:	4b93      	ldr	r3, [pc, #588]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001946:	689b      	ldr	r3, [r3, #8]
90001948:	f003 030c 	and.w	r3, r3, #12
9000194c:	2b08      	cmp	r3, #8
9000194e:	d112      	bne.n	90001976 <HAL_RCC_OscConfig+0x62>
90001950:	4b90      	ldr	r3, [pc, #576]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001952:	685b      	ldr	r3, [r3, #4]
90001954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90001958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000195c:	d10b      	bne.n	90001976 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000195e:	4b8d      	ldr	r3, [pc, #564]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001960:	681b      	ldr	r3, [r3, #0]
90001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001966:	2b00      	cmp	r3, #0
90001968:	d06c      	beq.n	90001a44 <HAL_RCC_OscConfig+0x130>
9000196a:	687b      	ldr	r3, [r7, #4]
9000196c:	685b      	ldr	r3, [r3, #4]
9000196e:	2b00      	cmp	r3, #0
90001970:	d168      	bne.n	90001a44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
90001972:	2301      	movs	r3, #1
90001974:	e26b      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
90001976:	687b      	ldr	r3, [r7, #4]
90001978:	685b      	ldr	r3, [r3, #4]
9000197a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000197e:	d106      	bne.n	9000198e <HAL_RCC_OscConfig+0x7a>
90001980:	4b84      	ldr	r3, [pc, #528]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001982:	681b      	ldr	r3, [r3, #0]
90001984:	4a83      	ldr	r2, [pc, #524]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000198a:	6013      	str	r3, [r2, #0]
9000198c:	e02e      	b.n	900019ec <HAL_RCC_OscConfig+0xd8>
9000198e:	687b      	ldr	r3, [r7, #4]
90001990:	685b      	ldr	r3, [r3, #4]
90001992:	2b00      	cmp	r3, #0
90001994:	d10c      	bne.n	900019b0 <HAL_RCC_OscConfig+0x9c>
90001996:	4b7f      	ldr	r3, [pc, #508]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001998:	681b      	ldr	r3, [r3, #0]
9000199a:	4a7e      	ldr	r2, [pc, #504]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
9000199c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900019a0:	6013      	str	r3, [r2, #0]
900019a2:	4b7c      	ldr	r3, [pc, #496]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
900019a4:	681b      	ldr	r3, [r3, #0]
900019a6:	4a7b      	ldr	r2, [pc, #492]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
900019a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900019ac:	6013      	str	r3, [r2, #0]
900019ae:	e01d      	b.n	900019ec <HAL_RCC_OscConfig+0xd8>
900019b0:	687b      	ldr	r3, [r7, #4]
900019b2:	685b      	ldr	r3, [r3, #4]
900019b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
900019b8:	d10c      	bne.n	900019d4 <HAL_RCC_OscConfig+0xc0>
900019ba:	4b76      	ldr	r3, [pc, #472]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
900019bc:	681b      	ldr	r3, [r3, #0]
900019be:	4a75      	ldr	r2, [pc, #468]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
900019c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
900019c4:	6013      	str	r3, [r2, #0]
900019c6:	4b73      	ldr	r3, [pc, #460]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
900019c8:	681b      	ldr	r3, [r3, #0]
900019ca:	4a72      	ldr	r2, [pc, #456]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
900019cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900019d0:	6013      	str	r3, [r2, #0]
900019d2:	e00b      	b.n	900019ec <HAL_RCC_OscConfig+0xd8>
900019d4:	4b6f      	ldr	r3, [pc, #444]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
900019d6:	681b      	ldr	r3, [r3, #0]
900019d8:	4a6e      	ldr	r2, [pc, #440]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
900019da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900019de:	6013      	str	r3, [r2, #0]
900019e0:	4b6c      	ldr	r3, [pc, #432]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
900019e2:	681b      	ldr	r3, [r3, #0]
900019e4:	4a6b      	ldr	r2, [pc, #428]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
900019e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900019ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
900019ec:	687b      	ldr	r3, [r7, #4]
900019ee:	685b      	ldr	r3, [r3, #4]
900019f0:	2b00      	cmp	r3, #0
900019f2:	d013      	beq.n	90001a1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
900019f4:	f7ff fc36 	bl	90001264 <HAL_GetTick>
900019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
900019fa:	e008      	b.n	90001a0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
900019fc:	f7ff fc32 	bl	90001264 <HAL_GetTick>
90001a00:	4602      	mov	r2, r0
90001a02:	693b      	ldr	r3, [r7, #16]
90001a04:	1ad3      	subs	r3, r2, r3
90001a06:	2b64      	cmp	r3, #100	; 0x64
90001a08:	d901      	bls.n	90001a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
90001a0a:	2303      	movs	r3, #3
90001a0c:	e21f      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90001a0e:	4b61      	ldr	r3, [pc, #388]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001a10:	681b      	ldr	r3, [r3, #0]
90001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001a16:	2b00      	cmp	r3, #0
90001a18:	d0f0      	beq.n	900019fc <HAL_RCC_OscConfig+0xe8>
90001a1a:	e014      	b.n	90001a46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001a1c:	f7ff fc22 	bl	90001264 <HAL_GetTick>
90001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90001a22:	e008      	b.n	90001a36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
90001a24:	f7ff fc1e 	bl	90001264 <HAL_GetTick>
90001a28:	4602      	mov	r2, r0
90001a2a:	693b      	ldr	r3, [r7, #16]
90001a2c:	1ad3      	subs	r3, r2, r3
90001a2e:	2b64      	cmp	r3, #100	; 0x64
90001a30:	d901      	bls.n	90001a36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
90001a32:	2303      	movs	r3, #3
90001a34:	e20b      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
90001a36:	4b57      	ldr	r3, [pc, #348]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001a38:	681b      	ldr	r3, [r3, #0]
90001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001a3e:	2b00      	cmp	r3, #0
90001a40:	d1f0      	bne.n	90001a24 <HAL_RCC_OscConfig+0x110>
90001a42:	e000      	b.n	90001a46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
90001a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
90001a46:	687b      	ldr	r3, [r7, #4]
90001a48:	681b      	ldr	r3, [r3, #0]
90001a4a:	f003 0302 	and.w	r3, r3, #2
90001a4e:	2b00      	cmp	r3, #0
90001a50:	d069      	beq.n	90001b26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
90001a52:	4b50      	ldr	r3, [pc, #320]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001a54:	689b      	ldr	r3, [r3, #8]
90001a56:	f003 030c 	and.w	r3, r3, #12
90001a5a:	2b00      	cmp	r3, #0
90001a5c:	d00b      	beq.n	90001a76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
90001a5e:	4b4d      	ldr	r3, [pc, #308]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001a60:	689b      	ldr	r3, [r3, #8]
90001a62:	f003 030c 	and.w	r3, r3, #12
90001a66:	2b08      	cmp	r3, #8
90001a68:	d11c      	bne.n	90001aa4 <HAL_RCC_OscConfig+0x190>
90001a6a:	4b4a      	ldr	r3, [pc, #296]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001a6c:	685b      	ldr	r3, [r3, #4]
90001a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90001a72:	2b00      	cmp	r3, #0
90001a74:	d116      	bne.n	90001aa4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90001a76:	4b47      	ldr	r3, [pc, #284]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001a78:	681b      	ldr	r3, [r3, #0]
90001a7a:	f003 0302 	and.w	r3, r3, #2
90001a7e:	2b00      	cmp	r3, #0
90001a80:	d005      	beq.n	90001a8e <HAL_RCC_OscConfig+0x17a>
90001a82:	687b      	ldr	r3, [r7, #4]
90001a84:	68db      	ldr	r3, [r3, #12]
90001a86:	2b01      	cmp	r3, #1
90001a88:	d001      	beq.n	90001a8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
90001a8a:	2301      	movs	r3, #1
90001a8c:	e1df      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90001a8e:	4b41      	ldr	r3, [pc, #260]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001a90:	681b      	ldr	r3, [r3, #0]
90001a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
90001a96:	687b      	ldr	r3, [r7, #4]
90001a98:	691b      	ldr	r3, [r3, #16]
90001a9a:	00db      	lsls	r3, r3, #3
90001a9c:	493d      	ldr	r1, [pc, #244]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001a9e:	4313      	orrs	r3, r2
90001aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
90001aa2:	e040      	b.n	90001b26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
90001aa4:	687b      	ldr	r3, [r7, #4]
90001aa6:	68db      	ldr	r3, [r3, #12]
90001aa8:	2b00      	cmp	r3, #0
90001aaa:	d023      	beq.n	90001af4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
90001aac:	4b39      	ldr	r3, [pc, #228]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001aae:	681b      	ldr	r3, [r3, #0]
90001ab0:	4a38      	ldr	r2, [pc, #224]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001ab2:	f043 0301 	orr.w	r3, r3, #1
90001ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001ab8:	f7ff fbd4 	bl	90001264 <HAL_GetTick>
90001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90001abe:	e008      	b.n	90001ad2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90001ac0:	f7ff fbd0 	bl	90001264 <HAL_GetTick>
90001ac4:	4602      	mov	r2, r0
90001ac6:	693b      	ldr	r3, [r7, #16]
90001ac8:	1ad3      	subs	r3, r2, r3
90001aca:	2b02      	cmp	r3, #2
90001acc:	d901      	bls.n	90001ad2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
90001ace:	2303      	movs	r3, #3
90001ad0:	e1bd      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90001ad2:	4b30      	ldr	r3, [pc, #192]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001ad4:	681b      	ldr	r3, [r3, #0]
90001ad6:	f003 0302 	and.w	r3, r3, #2
90001ada:	2b00      	cmp	r3, #0
90001adc:	d0f0      	beq.n	90001ac0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
90001ade:	4b2d      	ldr	r3, [pc, #180]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001ae0:	681b      	ldr	r3, [r3, #0]
90001ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
90001ae6:	687b      	ldr	r3, [r7, #4]
90001ae8:	691b      	ldr	r3, [r3, #16]
90001aea:	00db      	lsls	r3, r3, #3
90001aec:	4929      	ldr	r1, [pc, #164]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001aee:	4313      	orrs	r3, r2
90001af0:	600b      	str	r3, [r1, #0]
90001af2:	e018      	b.n	90001b26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
90001af4:	4b27      	ldr	r3, [pc, #156]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001af6:	681b      	ldr	r3, [r3, #0]
90001af8:	4a26      	ldr	r2, [pc, #152]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001afa:	f023 0301 	bic.w	r3, r3, #1
90001afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001b00:	f7ff fbb0 	bl	90001264 <HAL_GetTick>
90001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90001b06:	e008      	b.n	90001b1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
90001b08:	f7ff fbac 	bl	90001264 <HAL_GetTick>
90001b0c:	4602      	mov	r2, r0
90001b0e:	693b      	ldr	r3, [r7, #16]
90001b10:	1ad3      	subs	r3, r2, r3
90001b12:	2b02      	cmp	r3, #2
90001b14:	d901      	bls.n	90001b1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
90001b16:	2303      	movs	r3, #3
90001b18:	e199      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
90001b1a:	4b1e      	ldr	r3, [pc, #120]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001b1c:	681b      	ldr	r3, [r3, #0]
90001b1e:	f003 0302 	and.w	r3, r3, #2
90001b22:	2b00      	cmp	r3, #0
90001b24:	d1f0      	bne.n	90001b08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
90001b26:	687b      	ldr	r3, [r7, #4]
90001b28:	681b      	ldr	r3, [r3, #0]
90001b2a:	f003 0308 	and.w	r3, r3, #8
90001b2e:	2b00      	cmp	r3, #0
90001b30:	d038      	beq.n	90001ba4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
90001b32:	687b      	ldr	r3, [r7, #4]
90001b34:	695b      	ldr	r3, [r3, #20]
90001b36:	2b00      	cmp	r3, #0
90001b38:	d019      	beq.n	90001b6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
90001b3a:	4b16      	ldr	r3, [pc, #88]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001b3e:	4a15      	ldr	r2, [pc, #84]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001b40:	f043 0301 	orr.w	r3, r3, #1
90001b44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001b46:	f7ff fb8d 	bl	90001264 <HAL_GetTick>
90001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90001b4c:	e008      	b.n	90001b60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90001b4e:	f7ff fb89 	bl	90001264 <HAL_GetTick>
90001b52:	4602      	mov	r2, r0
90001b54:	693b      	ldr	r3, [r7, #16]
90001b56:	1ad3      	subs	r3, r2, r3
90001b58:	2b02      	cmp	r3, #2
90001b5a:	d901      	bls.n	90001b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
90001b5c:	2303      	movs	r3, #3
90001b5e:	e176      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
90001b60:	4b0c      	ldr	r3, [pc, #48]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001b64:	f003 0302 	and.w	r3, r3, #2
90001b68:	2b00      	cmp	r3, #0
90001b6a:	d0f0      	beq.n	90001b4e <HAL_RCC_OscConfig+0x23a>
90001b6c:	e01a      	b.n	90001ba4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
90001b6e:	4b09      	ldr	r3, [pc, #36]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001b72:	4a08      	ldr	r2, [pc, #32]	; (90001b94 <HAL_RCC_OscConfig+0x280>)
90001b74:	f023 0301 	bic.w	r3, r3, #1
90001b78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001b7a:	f7ff fb73 	bl	90001264 <HAL_GetTick>
90001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90001b80:	e00a      	b.n	90001b98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
90001b82:	f7ff fb6f 	bl	90001264 <HAL_GetTick>
90001b86:	4602      	mov	r2, r0
90001b88:	693b      	ldr	r3, [r7, #16]
90001b8a:	1ad3      	subs	r3, r2, r3
90001b8c:	2b02      	cmp	r3, #2
90001b8e:	d903      	bls.n	90001b98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
90001b90:	2303      	movs	r3, #3
90001b92:	e15c      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
90001b94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
90001b98:	4b91      	ldr	r3, [pc, #580]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90001b9c:	f003 0302 	and.w	r3, r3, #2
90001ba0:	2b00      	cmp	r3, #0
90001ba2:	d1ee      	bne.n	90001b82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
90001ba4:	687b      	ldr	r3, [r7, #4]
90001ba6:	681b      	ldr	r3, [r3, #0]
90001ba8:	f003 0304 	and.w	r3, r3, #4
90001bac:	2b00      	cmp	r3, #0
90001bae:	f000 80a4 	beq.w	90001cfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
90001bb2:	4b8b      	ldr	r3, [pc, #556]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90001bba:	2b00      	cmp	r3, #0
90001bbc:	d10d      	bne.n	90001bda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
90001bbe:	4b88      	ldr	r3, [pc, #544]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001bc2:	4a87      	ldr	r2, [pc, #540]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
90001bc8:	6413      	str	r3, [r2, #64]	; 0x40
90001bca:	4b85      	ldr	r3, [pc, #532]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90001bd2:	60bb      	str	r3, [r7, #8]
90001bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
90001bd6:	2301      	movs	r3, #1
90001bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90001bda:	4b82      	ldr	r3, [pc, #520]	; (90001de4 <HAL_RCC_OscConfig+0x4d0>)
90001bdc:	681b      	ldr	r3, [r3, #0]
90001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001be2:	2b00      	cmp	r3, #0
90001be4:	d118      	bne.n	90001c18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
90001be6:	4b7f      	ldr	r3, [pc, #508]	; (90001de4 <HAL_RCC_OscConfig+0x4d0>)
90001be8:	681b      	ldr	r3, [r3, #0]
90001bea:	4a7e      	ldr	r2, [pc, #504]	; (90001de4 <HAL_RCC_OscConfig+0x4d0>)
90001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90001bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
90001bf2:	f7ff fb37 	bl	90001264 <HAL_GetTick>
90001bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90001bf8:	e008      	b.n	90001c0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
90001bfa:	f7ff fb33 	bl	90001264 <HAL_GetTick>
90001bfe:	4602      	mov	r2, r0
90001c00:	693b      	ldr	r3, [r7, #16]
90001c02:	1ad3      	subs	r3, r2, r3
90001c04:	2b64      	cmp	r3, #100	; 0x64
90001c06:	d901      	bls.n	90001c0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
90001c08:	2303      	movs	r3, #3
90001c0a:	e120      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
90001c0c:	4b75      	ldr	r3, [pc, #468]	; (90001de4 <HAL_RCC_OscConfig+0x4d0>)
90001c0e:	681b      	ldr	r3, [r3, #0]
90001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
90001c14:	2b00      	cmp	r3, #0
90001c16:	d0f0      	beq.n	90001bfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
90001c18:	687b      	ldr	r3, [r7, #4]
90001c1a:	689b      	ldr	r3, [r3, #8]
90001c1c:	2b01      	cmp	r3, #1
90001c1e:	d106      	bne.n	90001c2e <HAL_RCC_OscConfig+0x31a>
90001c20:	4b6f      	ldr	r3, [pc, #444]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001c24:	4a6e      	ldr	r2, [pc, #440]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c26:	f043 0301 	orr.w	r3, r3, #1
90001c2a:	6713      	str	r3, [r2, #112]	; 0x70
90001c2c:	e02d      	b.n	90001c8a <HAL_RCC_OscConfig+0x376>
90001c2e:	687b      	ldr	r3, [r7, #4]
90001c30:	689b      	ldr	r3, [r3, #8]
90001c32:	2b00      	cmp	r3, #0
90001c34:	d10c      	bne.n	90001c50 <HAL_RCC_OscConfig+0x33c>
90001c36:	4b6a      	ldr	r3, [pc, #424]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001c3a:	4a69      	ldr	r2, [pc, #420]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c3c:	f023 0301 	bic.w	r3, r3, #1
90001c40:	6713      	str	r3, [r2, #112]	; 0x70
90001c42:	4b67      	ldr	r3, [pc, #412]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001c46:	4a66      	ldr	r2, [pc, #408]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c48:	f023 0304 	bic.w	r3, r3, #4
90001c4c:	6713      	str	r3, [r2, #112]	; 0x70
90001c4e:	e01c      	b.n	90001c8a <HAL_RCC_OscConfig+0x376>
90001c50:	687b      	ldr	r3, [r7, #4]
90001c52:	689b      	ldr	r3, [r3, #8]
90001c54:	2b05      	cmp	r3, #5
90001c56:	d10c      	bne.n	90001c72 <HAL_RCC_OscConfig+0x35e>
90001c58:	4b61      	ldr	r3, [pc, #388]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001c5c:	4a60      	ldr	r2, [pc, #384]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c5e:	f043 0304 	orr.w	r3, r3, #4
90001c62:	6713      	str	r3, [r2, #112]	; 0x70
90001c64:	4b5e      	ldr	r3, [pc, #376]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001c68:	4a5d      	ldr	r2, [pc, #372]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c6a:	f043 0301 	orr.w	r3, r3, #1
90001c6e:	6713      	str	r3, [r2, #112]	; 0x70
90001c70:	e00b      	b.n	90001c8a <HAL_RCC_OscConfig+0x376>
90001c72:	4b5b      	ldr	r3, [pc, #364]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001c76:	4a5a      	ldr	r2, [pc, #360]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c78:	f023 0301 	bic.w	r3, r3, #1
90001c7c:	6713      	str	r3, [r2, #112]	; 0x70
90001c7e:	4b58      	ldr	r3, [pc, #352]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001c82:	4a57      	ldr	r2, [pc, #348]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001c84:	f023 0304 	bic.w	r3, r3, #4
90001c88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
90001c8a:	687b      	ldr	r3, [r7, #4]
90001c8c:	689b      	ldr	r3, [r3, #8]
90001c8e:	2b00      	cmp	r3, #0
90001c90:	d015      	beq.n	90001cbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001c92:	f7ff fae7 	bl	90001264 <HAL_GetTick>
90001c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90001c98:	e00a      	b.n	90001cb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90001c9a:	f7ff fae3 	bl	90001264 <HAL_GetTick>
90001c9e:	4602      	mov	r2, r0
90001ca0:	693b      	ldr	r3, [r7, #16]
90001ca2:	1ad3      	subs	r3, r2, r3
90001ca4:	f241 3288 	movw	r2, #5000	; 0x1388
90001ca8:	4293      	cmp	r3, r2
90001caa:	d901      	bls.n	90001cb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
90001cac:	2303      	movs	r3, #3
90001cae:	e0ce      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
90001cb0:	4b4b      	ldr	r3, [pc, #300]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001cb4:	f003 0302 	and.w	r3, r3, #2
90001cb8:	2b00      	cmp	r3, #0
90001cba:	d0ee      	beq.n	90001c9a <HAL_RCC_OscConfig+0x386>
90001cbc:	e014      	b.n	90001ce8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
90001cbe:	f7ff fad1 	bl	90001264 <HAL_GetTick>
90001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90001cc4:	e00a      	b.n	90001cdc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
90001cc6:	f7ff facd 	bl	90001264 <HAL_GetTick>
90001cca:	4602      	mov	r2, r0
90001ccc:	693b      	ldr	r3, [r7, #16]
90001cce:	1ad3      	subs	r3, r2, r3
90001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
90001cd4:	4293      	cmp	r3, r2
90001cd6:	d901      	bls.n	90001cdc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
90001cd8:	2303      	movs	r3, #3
90001cda:	e0b8      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
90001cdc:	4b40      	ldr	r3, [pc, #256]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90001ce0:	f003 0302 	and.w	r3, r3, #2
90001ce4:	2b00      	cmp	r3, #0
90001ce6:	d1ee      	bne.n	90001cc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
90001ce8:	7dfb      	ldrb	r3, [r7, #23]
90001cea:	2b01      	cmp	r3, #1
90001cec:	d105      	bne.n	90001cfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
90001cee:	4b3c      	ldr	r3, [pc, #240]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90001cf2:	4a3b      	ldr	r2, [pc, #236]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
90001cf8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
90001cfa:	687b      	ldr	r3, [r7, #4]
90001cfc:	699b      	ldr	r3, [r3, #24]
90001cfe:	2b00      	cmp	r3, #0
90001d00:	f000 80a4 	beq.w	90001e4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
90001d04:	4b36      	ldr	r3, [pc, #216]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001d06:	689b      	ldr	r3, [r3, #8]
90001d08:	f003 030c 	and.w	r3, r3, #12
90001d0c:	2b08      	cmp	r3, #8
90001d0e:	d06b      	beq.n	90001de8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
90001d10:	687b      	ldr	r3, [r7, #4]
90001d12:	699b      	ldr	r3, [r3, #24]
90001d14:	2b02      	cmp	r3, #2
90001d16:	d149      	bne.n	90001dac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90001d18:	4b31      	ldr	r3, [pc, #196]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001d1a:	681b      	ldr	r3, [r3, #0]
90001d1c:	4a30      	ldr	r2, [pc, #192]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90001d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001d24:	f7ff fa9e 	bl	90001264 <HAL_GetTick>
90001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90001d2a:	e008      	b.n	90001d3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90001d2c:	f7ff fa9a 	bl	90001264 <HAL_GetTick>
90001d30:	4602      	mov	r2, r0
90001d32:	693b      	ldr	r3, [r7, #16]
90001d34:	1ad3      	subs	r3, r2, r3
90001d36:	2b02      	cmp	r3, #2
90001d38:	d901      	bls.n	90001d3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
90001d3a:	2303      	movs	r3, #3
90001d3c:	e087      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90001d3e:	4b28      	ldr	r3, [pc, #160]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001d40:	681b      	ldr	r3, [r3, #0]
90001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001d46:	2b00      	cmp	r3, #0
90001d48:	d1f0      	bne.n	90001d2c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
90001d4a:	687b      	ldr	r3, [r7, #4]
90001d4c:	69da      	ldr	r2, [r3, #28]
90001d4e:	687b      	ldr	r3, [r7, #4]
90001d50:	6a1b      	ldr	r3, [r3, #32]
90001d52:	431a      	orrs	r2, r3
90001d54:	687b      	ldr	r3, [r7, #4]
90001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90001d58:	019b      	lsls	r3, r3, #6
90001d5a:	431a      	orrs	r2, r3
90001d5c:	687b      	ldr	r3, [r7, #4]
90001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001d60:	085b      	lsrs	r3, r3, #1
90001d62:	3b01      	subs	r3, #1
90001d64:	041b      	lsls	r3, r3, #16
90001d66:	431a      	orrs	r2, r3
90001d68:	687b      	ldr	r3, [r7, #4]
90001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001d6c:	061b      	lsls	r3, r3, #24
90001d6e:	4313      	orrs	r3, r2
90001d70:	4a1b      	ldr	r2, [pc, #108]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001d72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
90001d76:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
90001d78:	4b19      	ldr	r3, [pc, #100]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001d7a:	681b      	ldr	r3, [r3, #0]
90001d7c:	4a18      	ldr	r2, [pc, #96]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
90001d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001d84:	f7ff fa6e 	bl	90001264 <HAL_GetTick>
90001d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90001d8a:	e008      	b.n	90001d9e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90001d8c:	f7ff fa6a 	bl	90001264 <HAL_GetTick>
90001d90:	4602      	mov	r2, r0
90001d92:	693b      	ldr	r3, [r7, #16]
90001d94:	1ad3      	subs	r3, r2, r3
90001d96:	2b02      	cmp	r3, #2
90001d98:	d901      	bls.n	90001d9e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
90001d9a:	2303      	movs	r3, #3
90001d9c:	e057      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90001d9e:	4b10      	ldr	r3, [pc, #64]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001da0:	681b      	ldr	r3, [r3, #0]
90001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001da6:	2b00      	cmp	r3, #0
90001da8:	d0f0      	beq.n	90001d8c <HAL_RCC_OscConfig+0x478>
90001daa:	e04f      	b.n	90001e4c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
90001dac:	4b0c      	ldr	r3, [pc, #48]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001dae:	681b      	ldr	r3, [r3, #0]
90001db0:	4a0b      	ldr	r2, [pc, #44]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
90001db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
90001db8:	f7ff fa54 	bl	90001264 <HAL_GetTick>
90001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90001dbe:	e008      	b.n	90001dd2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
90001dc0:	f7ff fa50 	bl	90001264 <HAL_GetTick>
90001dc4:	4602      	mov	r2, r0
90001dc6:	693b      	ldr	r3, [r7, #16]
90001dc8:	1ad3      	subs	r3, r2, r3
90001dca:	2b02      	cmp	r3, #2
90001dcc:	d901      	bls.n	90001dd2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
90001dce:	2303      	movs	r3, #3
90001dd0:	e03d      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
90001dd2:	4b03      	ldr	r3, [pc, #12]	; (90001de0 <HAL_RCC_OscConfig+0x4cc>)
90001dd4:	681b      	ldr	r3, [r3, #0]
90001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001dda:	2b00      	cmp	r3, #0
90001ddc:	d1f0      	bne.n	90001dc0 <HAL_RCC_OscConfig+0x4ac>
90001dde:	e035      	b.n	90001e4c <HAL_RCC_OscConfig+0x538>
90001de0:	40023800 	.word	0x40023800
90001de4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
90001de8:	4b1b      	ldr	r3, [pc, #108]	; (90001e58 <HAL_RCC_OscConfig+0x544>)
90001dea:	685b      	ldr	r3, [r3, #4]
90001dec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90001dee:	687b      	ldr	r3, [r7, #4]
90001df0:	699b      	ldr	r3, [r3, #24]
90001df2:	2b01      	cmp	r3, #1
90001df4:	d028      	beq.n	90001e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90001df6:	68fb      	ldr	r3, [r7, #12]
90001df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
90001dfc:	687b      	ldr	r3, [r7, #4]
90001dfe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
90001e00:	429a      	cmp	r2, r3
90001e02:	d121      	bne.n	90001e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90001e04:	68fb      	ldr	r3, [r7, #12]
90001e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
90001e0a:	687b      	ldr	r3, [r7, #4]
90001e0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
90001e0e:	429a      	cmp	r2, r3
90001e10:	d11a      	bne.n	90001e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90001e12:	68fa      	ldr	r2, [r7, #12]
90001e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
90001e18:	4013      	ands	r3, r2
90001e1a:	687a      	ldr	r2, [r7, #4]
90001e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
90001e1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
90001e20:	4293      	cmp	r3, r2
90001e22:	d111      	bne.n	90001e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90001e24:	68fb      	ldr	r3, [r7, #12]
90001e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
90001e2a:	687b      	ldr	r3, [r7, #4]
90001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e2e:	085b      	lsrs	r3, r3, #1
90001e30:	3b01      	subs	r3, #1
90001e32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
90001e34:	429a      	cmp	r2, r3
90001e36:	d107      	bne.n	90001e48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
90001e38:	68fb      	ldr	r3, [r7, #12]
90001e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
90001e3e:	687b      	ldr	r3, [r7, #4]
90001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90001e42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
90001e44:	429a      	cmp	r2, r3
90001e46:	d001      	beq.n	90001e4c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
90001e48:	2301      	movs	r3, #1
90001e4a:	e000      	b.n	90001e4e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
90001e4c:	2300      	movs	r3, #0
}
90001e4e:	4618      	mov	r0, r3
90001e50:	3718      	adds	r7, #24
90001e52:	46bd      	mov	sp, r7
90001e54:	bd80      	pop	{r7, pc}
90001e56:	bf00      	nop
90001e58:	40023800 	.word	0x40023800

90001e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
90001e5c:	b580      	push	{r7, lr}
90001e5e:	b084      	sub	sp, #16
90001e60:	af00      	add	r7, sp, #0
90001e62:	6078      	str	r0, [r7, #4]
90001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
90001e66:	2300      	movs	r3, #0
90001e68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
90001e6a:	687b      	ldr	r3, [r7, #4]
90001e6c:	2b00      	cmp	r3, #0
90001e6e:	d101      	bne.n	90001e74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
90001e70:	2301      	movs	r3, #1
90001e72:	e0d0      	b.n	90002016 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
90001e74:	4b6a      	ldr	r3, [pc, #424]	; (90002020 <HAL_RCC_ClockConfig+0x1c4>)
90001e76:	681b      	ldr	r3, [r3, #0]
90001e78:	f003 030f 	and.w	r3, r3, #15
90001e7c:	683a      	ldr	r2, [r7, #0]
90001e7e:	429a      	cmp	r2, r3
90001e80:	d910      	bls.n	90001ea4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90001e82:	4b67      	ldr	r3, [pc, #412]	; (90002020 <HAL_RCC_ClockConfig+0x1c4>)
90001e84:	681b      	ldr	r3, [r3, #0]
90001e86:	f023 020f 	bic.w	r2, r3, #15
90001e8a:	4965      	ldr	r1, [pc, #404]	; (90002020 <HAL_RCC_ClockConfig+0x1c4>)
90001e8c:	683b      	ldr	r3, [r7, #0]
90001e8e:	4313      	orrs	r3, r2
90001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90001e92:	4b63      	ldr	r3, [pc, #396]	; (90002020 <HAL_RCC_ClockConfig+0x1c4>)
90001e94:	681b      	ldr	r3, [r3, #0]
90001e96:	f003 030f 	and.w	r3, r3, #15
90001e9a:	683a      	ldr	r2, [r7, #0]
90001e9c:	429a      	cmp	r2, r3
90001e9e:	d001      	beq.n	90001ea4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
90001ea0:	2301      	movs	r3, #1
90001ea2:	e0b8      	b.n	90002016 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
90001ea4:	687b      	ldr	r3, [r7, #4]
90001ea6:	681b      	ldr	r3, [r3, #0]
90001ea8:	f003 0302 	and.w	r3, r3, #2
90001eac:	2b00      	cmp	r3, #0
90001eae:	d020      	beq.n	90001ef2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90001eb0:	687b      	ldr	r3, [r7, #4]
90001eb2:	681b      	ldr	r3, [r3, #0]
90001eb4:	f003 0304 	and.w	r3, r3, #4
90001eb8:	2b00      	cmp	r3, #0
90001eba:	d005      	beq.n	90001ec8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
90001ebc:	4b59      	ldr	r3, [pc, #356]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001ebe:	689b      	ldr	r3, [r3, #8]
90001ec0:	4a58      	ldr	r2, [pc, #352]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
90001ec6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90001ec8:	687b      	ldr	r3, [r7, #4]
90001eca:	681b      	ldr	r3, [r3, #0]
90001ecc:	f003 0308 	and.w	r3, r3, #8
90001ed0:	2b00      	cmp	r3, #0
90001ed2:	d005      	beq.n	90001ee0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
90001ed4:	4b53      	ldr	r3, [pc, #332]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001ed6:	689b      	ldr	r3, [r3, #8]
90001ed8:	4a52      	ldr	r2, [pc, #328]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
90001ede:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
90001ee0:	4b50      	ldr	r3, [pc, #320]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001ee2:	689b      	ldr	r3, [r3, #8]
90001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
90001ee8:	687b      	ldr	r3, [r7, #4]
90001eea:	689b      	ldr	r3, [r3, #8]
90001eec:	494d      	ldr	r1, [pc, #308]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001eee:	4313      	orrs	r3, r2
90001ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
90001ef2:	687b      	ldr	r3, [r7, #4]
90001ef4:	681b      	ldr	r3, [r3, #0]
90001ef6:	f003 0301 	and.w	r3, r3, #1
90001efa:	2b00      	cmp	r3, #0
90001efc:	d040      	beq.n	90001f80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
90001efe:	687b      	ldr	r3, [r7, #4]
90001f00:	685b      	ldr	r3, [r3, #4]
90001f02:	2b01      	cmp	r3, #1
90001f04:	d107      	bne.n	90001f16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
90001f06:	4b47      	ldr	r3, [pc, #284]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001f08:	681b      	ldr	r3, [r3, #0]
90001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90001f0e:	2b00      	cmp	r3, #0
90001f10:	d115      	bne.n	90001f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90001f12:	2301      	movs	r3, #1
90001f14:	e07f      	b.n	90002016 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
90001f16:	687b      	ldr	r3, [r7, #4]
90001f18:	685b      	ldr	r3, [r3, #4]
90001f1a:	2b02      	cmp	r3, #2
90001f1c:	d107      	bne.n	90001f2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
90001f1e:	4b41      	ldr	r3, [pc, #260]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001f20:	681b      	ldr	r3, [r3, #0]
90001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
90001f26:	2b00      	cmp	r3, #0
90001f28:	d109      	bne.n	90001f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90001f2a:	2301      	movs	r3, #1
90001f2c:	e073      	b.n	90002016 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
90001f2e:	4b3d      	ldr	r3, [pc, #244]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001f30:	681b      	ldr	r3, [r3, #0]
90001f32:	f003 0302 	and.w	r3, r3, #2
90001f36:	2b00      	cmp	r3, #0
90001f38:	d101      	bne.n	90001f3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
90001f3a:	2301      	movs	r3, #1
90001f3c:	e06b      	b.n	90002016 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
90001f3e:	4b39      	ldr	r3, [pc, #228]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001f40:	689b      	ldr	r3, [r3, #8]
90001f42:	f023 0203 	bic.w	r2, r3, #3
90001f46:	687b      	ldr	r3, [r7, #4]
90001f48:	685b      	ldr	r3, [r3, #4]
90001f4a:	4936      	ldr	r1, [pc, #216]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001f4c:	4313      	orrs	r3, r2
90001f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
90001f50:	f7ff f988 	bl	90001264 <HAL_GetTick>
90001f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90001f56:	e00a      	b.n	90001f6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
90001f58:	f7ff f984 	bl	90001264 <HAL_GetTick>
90001f5c:	4602      	mov	r2, r0
90001f5e:	68fb      	ldr	r3, [r7, #12]
90001f60:	1ad3      	subs	r3, r2, r3
90001f62:	f241 3288 	movw	r2, #5000	; 0x1388
90001f66:	4293      	cmp	r3, r2
90001f68:	d901      	bls.n	90001f6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
90001f6a:	2303      	movs	r3, #3
90001f6c:	e053      	b.n	90002016 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
90001f6e:	4b2d      	ldr	r3, [pc, #180]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001f70:	689b      	ldr	r3, [r3, #8]
90001f72:	f003 020c 	and.w	r2, r3, #12
90001f76:	687b      	ldr	r3, [r7, #4]
90001f78:	685b      	ldr	r3, [r3, #4]
90001f7a:	009b      	lsls	r3, r3, #2
90001f7c:	429a      	cmp	r2, r3
90001f7e:	d1eb      	bne.n	90001f58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
90001f80:	4b27      	ldr	r3, [pc, #156]	; (90002020 <HAL_RCC_ClockConfig+0x1c4>)
90001f82:	681b      	ldr	r3, [r3, #0]
90001f84:	f003 030f 	and.w	r3, r3, #15
90001f88:	683a      	ldr	r2, [r7, #0]
90001f8a:	429a      	cmp	r2, r3
90001f8c:	d210      	bcs.n	90001fb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
90001f8e:	4b24      	ldr	r3, [pc, #144]	; (90002020 <HAL_RCC_ClockConfig+0x1c4>)
90001f90:	681b      	ldr	r3, [r3, #0]
90001f92:	f023 020f 	bic.w	r2, r3, #15
90001f96:	4922      	ldr	r1, [pc, #136]	; (90002020 <HAL_RCC_ClockConfig+0x1c4>)
90001f98:	683b      	ldr	r3, [r7, #0]
90001f9a:	4313      	orrs	r3, r2
90001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
90001f9e:	4b20      	ldr	r3, [pc, #128]	; (90002020 <HAL_RCC_ClockConfig+0x1c4>)
90001fa0:	681b      	ldr	r3, [r3, #0]
90001fa2:	f003 030f 	and.w	r3, r3, #15
90001fa6:	683a      	ldr	r2, [r7, #0]
90001fa8:	429a      	cmp	r2, r3
90001faa:	d001      	beq.n	90001fb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
90001fac:	2301      	movs	r3, #1
90001fae:	e032      	b.n	90002016 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
90001fb0:	687b      	ldr	r3, [r7, #4]
90001fb2:	681b      	ldr	r3, [r3, #0]
90001fb4:	f003 0304 	and.w	r3, r3, #4
90001fb8:	2b00      	cmp	r3, #0
90001fba:	d008      	beq.n	90001fce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
90001fbc:	4b19      	ldr	r3, [pc, #100]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001fbe:	689b      	ldr	r3, [r3, #8]
90001fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
90001fc4:	687b      	ldr	r3, [r7, #4]
90001fc6:	68db      	ldr	r3, [r3, #12]
90001fc8:	4916      	ldr	r1, [pc, #88]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001fca:	4313      	orrs	r3, r2
90001fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
90001fce:	687b      	ldr	r3, [r7, #4]
90001fd0:	681b      	ldr	r3, [r3, #0]
90001fd2:	f003 0308 	and.w	r3, r3, #8
90001fd6:	2b00      	cmp	r3, #0
90001fd8:	d009      	beq.n	90001fee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
90001fda:	4b12      	ldr	r3, [pc, #72]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001fdc:	689b      	ldr	r3, [r3, #8]
90001fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
90001fe2:	687b      	ldr	r3, [r7, #4]
90001fe4:	691b      	ldr	r3, [r3, #16]
90001fe6:	00db      	lsls	r3, r3, #3
90001fe8:	490e      	ldr	r1, [pc, #56]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001fea:	4313      	orrs	r3, r2
90001fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
90001fee:	f000 f821 	bl	90002034 <HAL_RCC_GetSysClockFreq>
90001ff2:	4602      	mov	r2, r0
90001ff4:	4b0b      	ldr	r3, [pc, #44]	; (90002024 <HAL_RCC_ClockConfig+0x1c8>)
90001ff6:	689b      	ldr	r3, [r3, #8]
90001ff8:	091b      	lsrs	r3, r3, #4
90001ffa:	f003 030f 	and.w	r3, r3, #15
90001ffe:	490a      	ldr	r1, [pc, #40]	; (90002028 <HAL_RCC_ClockConfig+0x1cc>)
90002000:	5ccb      	ldrb	r3, [r1, r3]
90002002:	fa22 f303 	lsr.w	r3, r2, r3
90002006:	4a09      	ldr	r2, [pc, #36]	; (9000202c <HAL_RCC_ClockConfig+0x1d0>)
90002008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
9000200a:	4b09      	ldr	r3, [pc, #36]	; (90002030 <HAL_RCC_ClockConfig+0x1d4>)
9000200c:	681b      	ldr	r3, [r3, #0]
9000200e:	4618      	mov	r0, r3
90002010:	f7ff f8e4 	bl	900011dc <HAL_InitTick>

  return HAL_OK;
90002014:	2300      	movs	r3, #0
}
90002016:	4618      	mov	r0, r3
90002018:	3710      	adds	r7, #16
9000201a:	46bd      	mov	sp, r7
9000201c:	bd80      	pop	{r7, pc}
9000201e:	bf00      	nop
90002020:	40023c00 	.word	0x40023c00
90002024:	40023800 	.word	0x40023800
90002028:	90002bb8 	.word	0x90002bb8
9000202c:	20000000 	.word	0x20000000
90002030:	20000004 	.word	0x20000004

90002034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90002034:	b5b0      	push	{r4, r5, r7, lr}
90002036:	b084      	sub	sp, #16
90002038:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
9000203a:	2100      	movs	r1, #0
9000203c:	6079      	str	r1, [r7, #4]
9000203e:	2100      	movs	r1, #0
90002040:	60f9      	str	r1, [r7, #12]
90002042:	2100      	movs	r1, #0
90002044:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
90002046:	2100      	movs	r1, #0
90002048:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000204a:	4952      	ldr	r1, [pc, #328]	; (90002194 <HAL_RCC_GetSysClockFreq+0x160>)
9000204c:	6889      	ldr	r1, [r1, #8]
9000204e:	f001 010c 	and.w	r1, r1, #12
90002052:	2908      	cmp	r1, #8
90002054:	d00d      	beq.n	90002072 <HAL_RCC_GetSysClockFreq+0x3e>
90002056:	2908      	cmp	r1, #8
90002058:	f200 8094 	bhi.w	90002184 <HAL_RCC_GetSysClockFreq+0x150>
9000205c:	2900      	cmp	r1, #0
9000205e:	d002      	beq.n	90002066 <HAL_RCC_GetSysClockFreq+0x32>
90002060:	2904      	cmp	r1, #4
90002062:	d003      	beq.n	9000206c <HAL_RCC_GetSysClockFreq+0x38>
90002064:	e08e      	b.n	90002184 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
90002066:	4b4c      	ldr	r3, [pc, #304]	; (90002198 <HAL_RCC_GetSysClockFreq+0x164>)
90002068:	60bb      	str	r3, [r7, #8]
      break;
9000206a:	e08e      	b.n	9000218a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
9000206c:	4b4b      	ldr	r3, [pc, #300]	; (9000219c <HAL_RCC_GetSysClockFreq+0x168>)
9000206e:	60bb      	str	r3, [r7, #8]
      break;
90002070:	e08b      	b.n	9000218a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
90002072:	4948      	ldr	r1, [pc, #288]	; (90002194 <HAL_RCC_GetSysClockFreq+0x160>)
90002074:	6849      	ldr	r1, [r1, #4]
90002076:	f001 013f 	and.w	r1, r1, #63	; 0x3f
9000207a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
9000207c:	4945      	ldr	r1, [pc, #276]	; (90002194 <HAL_RCC_GetSysClockFreq+0x160>)
9000207e:	6849      	ldr	r1, [r1, #4]
90002080:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
90002084:	2900      	cmp	r1, #0
90002086:	d024      	beq.n	900020d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
90002088:	4942      	ldr	r1, [pc, #264]	; (90002194 <HAL_RCC_GetSysClockFreq+0x160>)
9000208a:	6849      	ldr	r1, [r1, #4]
9000208c:	0989      	lsrs	r1, r1, #6
9000208e:	4608      	mov	r0, r1
90002090:	f04f 0100 	mov.w	r1, #0
90002094:	f240 14ff 	movw	r4, #511	; 0x1ff
90002098:	f04f 0500 	mov.w	r5, #0
9000209c:	ea00 0204 	and.w	r2, r0, r4
900020a0:	ea01 0305 	and.w	r3, r1, r5
900020a4:	493d      	ldr	r1, [pc, #244]	; (9000219c <HAL_RCC_GetSysClockFreq+0x168>)
900020a6:	fb01 f003 	mul.w	r0, r1, r3
900020aa:	2100      	movs	r1, #0
900020ac:	fb01 f102 	mul.w	r1, r1, r2
900020b0:	1844      	adds	r4, r0, r1
900020b2:	493a      	ldr	r1, [pc, #232]	; (9000219c <HAL_RCC_GetSysClockFreq+0x168>)
900020b4:	fba2 0101 	umull	r0, r1, r2, r1
900020b8:	1863      	adds	r3, r4, r1
900020ba:	4619      	mov	r1, r3
900020bc:	687b      	ldr	r3, [r7, #4]
900020be:	461a      	mov	r2, r3
900020c0:	f04f 0300 	mov.w	r3, #0
900020c4:	f7fe f8a0 	bl	90000208 <__aeabi_uldivmod>
900020c8:	4602      	mov	r2, r0
900020ca:	460b      	mov	r3, r1
900020cc:	4613      	mov	r3, r2
900020ce:	60fb      	str	r3, [r7, #12]
900020d0:	e04a      	b.n	90002168 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
900020d2:	4b30      	ldr	r3, [pc, #192]	; (90002194 <HAL_RCC_GetSysClockFreq+0x160>)
900020d4:	685b      	ldr	r3, [r3, #4]
900020d6:	099b      	lsrs	r3, r3, #6
900020d8:	461a      	mov	r2, r3
900020da:	f04f 0300 	mov.w	r3, #0
900020de:	f240 10ff 	movw	r0, #511	; 0x1ff
900020e2:	f04f 0100 	mov.w	r1, #0
900020e6:	ea02 0400 	and.w	r4, r2, r0
900020ea:	ea03 0501 	and.w	r5, r3, r1
900020ee:	4620      	mov	r0, r4
900020f0:	4629      	mov	r1, r5
900020f2:	f04f 0200 	mov.w	r2, #0
900020f6:	f04f 0300 	mov.w	r3, #0
900020fa:	014b      	lsls	r3, r1, #5
900020fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
90002100:	0142      	lsls	r2, r0, #5
90002102:	4610      	mov	r0, r2
90002104:	4619      	mov	r1, r3
90002106:	1b00      	subs	r0, r0, r4
90002108:	eb61 0105 	sbc.w	r1, r1, r5
9000210c:	f04f 0200 	mov.w	r2, #0
90002110:	f04f 0300 	mov.w	r3, #0
90002114:	018b      	lsls	r3, r1, #6
90002116:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
9000211a:	0182      	lsls	r2, r0, #6
9000211c:	1a12      	subs	r2, r2, r0
9000211e:	eb63 0301 	sbc.w	r3, r3, r1
90002122:	f04f 0000 	mov.w	r0, #0
90002126:	f04f 0100 	mov.w	r1, #0
9000212a:	00d9      	lsls	r1, r3, #3
9000212c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
90002130:	00d0      	lsls	r0, r2, #3
90002132:	4602      	mov	r2, r0
90002134:	460b      	mov	r3, r1
90002136:	1912      	adds	r2, r2, r4
90002138:	eb45 0303 	adc.w	r3, r5, r3
9000213c:	f04f 0000 	mov.w	r0, #0
90002140:	f04f 0100 	mov.w	r1, #0
90002144:	0299      	lsls	r1, r3, #10
90002146:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
9000214a:	0290      	lsls	r0, r2, #10
9000214c:	4602      	mov	r2, r0
9000214e:	460b      	mov	r3, r1
90002150:	4610      	mov	r0, r2
90002152:	4619      	mov	r1, r3
90002154:	687b      	ldr	r3, [r7, #4]
90002156:	461a      	mov	r2, r3
90002158:	f04f 0300 	mov.w	r3, #0
9000215c:	f7fe f854 	bl	90000208 <__aeabi_uldivmod>
90002160:	4602      	mov	r2, r0
90002162:	460b      	mov	r3, r1
90002164:	4613      	mov	r3, r2
90002166:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
90002168:	4b0a      	ldr	r3, [pc, #40]	; (90002194 <HAL_RCC_GetSysClockFreq+0x160>)
9000216a:	685b      	ldr	r3, [r3, #4]
9000216c:	0c1b      	lsrs	r3, r3, #16
9000216e:	f003 0303 	and.w	r3, r3, #3
90002172:	3301      	adds	r3, #1
90002174:	005b      	lsls	r3, r3, #1
90002176:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
90002178:	68fa      	ldr	r2, [r7, #12]
9000217a:	683b      	ldr	r3, [r7, #0]
9000217c:	fbb2 f3f3 	udiv	r3, r2, r3
90002180:	60bb      	str	r3, [r7, #8]
      break;
90002182:	e002      	b.n	9000218a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
90002184:	4b04      	ldr	r3, [pc, #16]	; (90002198 <HAL_RCC_GetSysClockFreq+0x164>)
90002186:	60bb      	str	r3, [r7, #8]
      break;
90002188:	bf00      	nop
    }
  }
  return sysclockfreq;
9000218a:	68bb      	ldr	r3, [r7, #8]
}
9000218c:	4618      	mov	r0, r3
9000218e:	3710      	adds	r7, #16
90002190:	46bd      	mov	sp, r7
90002192:	bdb0      	pop	{r4, r5, r7, pc}
90002194:	40023800 	.word	0x40023800
90002198:	00f42400 	.word	0x00f42400
9000219c:	017d7840 	.word	0x017d7840

900021a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
900021a0:	b480      	push	{r7}
900021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
900021a4:	4b03      	ldr	r3, [pc, #12]	; (900021b4 <HAL_RCC_GetHCLKFreq+0x14>)
900021a6:	681b      	ldr	r3, [r3, #0]
}
900021a8:	4618      	mov	r0, r3
900021aa:	46bd      	mov	sp, r7
900021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900021b0:	4770      	bx	lr
900021b2:	bf00      	nop
900021b4:	20000000 	.word	0x20000000

900021b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
900021b8:	b580      	push	{r7, lr}
900021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
900021bc:	f7ff fff0 	bl	900021a0 <HAL_RCC_GetHCLKFreq>
900021c0:	4602      	mov	r2, r0
900021c2:	4b05      	ldr	r3, [pc, #20]	; (900021d8 <HAL_RCC_GetPCLK1Freq+0x20>)
900021c4:	689b      	ldr	r3, [r3, #8]
900021c6:	0a9b      	lsrs	r3, r3, #10
900021c8:	f003 0307 	and.w	r3, r3, #7
900021cc:	4903      	ldr	r1, [pc, #12]	; (900021dc <HAL_RCC_GetPCLK1Freq+0x24>)
900021ce:	5ccb      	ldrb	r3, [r1, r3]
900021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
900021d4:	4618      	mov	r0, r3
900021d6:	bd80      	pop	{r7, pc}
900021d8:	40023800 	.word	0x40023800
900021dc:	90002bc8 	.word	0x90002bc8

900021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
900021e0:	b580      	push	{r7, lr}
900021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
900021e4:	f7ff ffdc 	bl	900021a0 <HAL_RCC_GetHCLKFreq>
900021e8:	4602      	mov	r2, r0
900021ea:	4b05      	ldr	r3, [pc, #20]	; (90002200 <HAL_RCC_GetPCLK2Freq+0x20>)
900021ec:	689b      	ldr	r3, [r3, #8]
900021ee:	0b5b      	lsrs	r3, r3, #13
900021f0:	f003 0307 	and.w	r3, r3, #7
900021f4:	4903      	ldr	r1, [pc, #12]	; (90002204 <HAL_RCC_GetPCLK2Freq+0x24>)
900021f6:	5ccb      	ldrb	r3, [r1, r3]
900021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
900021fc:	4618      	mov	r0, r3
900021fe:	bd80      	pop	{r7, pc}
90002200:	40023800 	.word	0x40023800
90002204:	90002bc8 	.word	0x90002bc8

90002208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
90002208:	b580      	push	{r7, lr}
9000220a:	b082      	sub	sp, #8
9000220c:	af00      	add	r7, sp, #0
9000220e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
90002210:	687b      	ldr	r3, [r7, #4]
90002212:	2b00      	cmp	r3, #0
90002214:	d101      	bne.n	9000221a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
90002216:	2301      	movs	r3, #1
90002218:	e040      	b.n	9000229c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
9000221a:	687b      	ldr	r3, [r7, #4]
9000221c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000221e:	2b00      	cmp	r3, #0
90002220:	d106      	bne.n	90002230 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
90002222:	687b      	ldr	r3, [r7, #4]
90002224:	2200      	movs	r2, #0
90002226:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
9000222a:	6878      	ldr	r0, [r7, #4]
9000222c:	f7fe ff2c 	bl	90001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
90002230:	687b      	ldr	r3, [r7, #4]
90002232:	2224      	movs	r2, #36	; 0x24
90002234:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
90002236:	687b      	ldr	r3, [r7, #4]
90002238:	681b      	ldr	r3, [r3, #0]
9000223a:	681a      	ldr	r2, [r3, #0]
9000223c:	687b      	ldr	r3, [r7, #4]
9000223e:	681b      	ldr	r3, [r3, #0]
90002240:	f022 0201 	bic.w	r2, r2, #1
90002244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
90002246:	6878      	ldr	r0, [r7, #4]
90002248:	f000 f8c0 	bl	900023cc <UART_SetConfig>
9000224c:	4603      	mov	r3, r0
9000224e:	2b01      	cmp	r3, #1
90002250:	d101      	bne.n	90002256 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
90002252:	2301      	movs	r3, #1
90002254:	e022      	b.n	9000229c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90002256:	687b      	ldr	r3, [r7, #4]
90002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000225a:	2b00      	cmp	r3, #0
9000225c:	d002      	beq.n	90002264 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
9000225e:	6878      	ldr	r0, [r7, #4]
90002260:	f000 fb16 	bl	90002890 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90002264:	687b      	ldr	r3, [r7, #4]
90002266:	681b      	ldr	r3, [r3, #0]
90002268:	685a      	ldr	r2, [r3, #4]
9000226a:	687b      	ldr	r3, [r7, #4]
9000226c:	681b      	ldr	r3, [r3, #0]
9000226e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
90002272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90002274:	687b      	ldr	r3, [r7, #4]
90002276:	681b      	ldr	r3, [r3, #0]
90002278:	689a      	ldr	r2, [r3, #8]
9000227a:	687b      	ldr	r3, [r7, #4]
9000227c:	681b      	ldr	r3, [r3, #0]
9000227e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
90002282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
90002284:	687b      	ldr	r3, [r7, #4]
90002286:	681b      	ldr	r3, [r3, #0]
90002288:	681a      	ldr	r2, [r3, #0]
9000228a:	687b      	ldr	r3, [r7, #4]
9000228c:	681b      	ldr	r3, [r3, #0]
9000228e:	f042 0201 	orr.w	r2, r2, #1
90002292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
90002294:	6878      	ldr	r0, [r7, #4]
90002296:	f000 fb9d 	bl	900029d4 <UART_CheckIdleState>
9000229a:	4603      	mov	r3, r0
}
9000229c:	4618      	mov	r0, r3
9000229e:	3708      	adds	r7, #8
900022a0:	46bd      	mov	sp, r7
900022a2:	bd80      	pop	{r7, pc}

900022a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
900022a4:	b580      	push	{r7, lr}
900022a6:	b08a      	sub	sp, #40	; 0x28
900022a8:	af02      	add	r7, sp, #8
900022aa:	60f8      	str	r0, [r7, #12]
900022ac:	60b9      	str	r1, [r7, #8]
900022ae:	603b      	str	r3, [r7, #0]
900022b0:	4613      	mov	r3, r2
900022b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
900022b4:	68fb      	ldr	r3, [r7, #12]
900022b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
900022b8:	2b20      	cmp	r3, #32
900022ba:	f040 8081 	bne.w	900023c0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
900022be:	68bb      	ldr	r3, [r7, #8]
900022c0:	2b00      	cmp	r3, #0
900022c2:	d002      	beq.n	900022ca <HAL_UART_Transmit+0x26>
900022c4:	88fb      	ldrh	r3, [r7, #6]
900022c6:	2b00      	cmp	r3, #0
900022c8:	d101      	bne.n	900022ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
900022ca:	2301      	movs	r3, #1
900022cc:	e079      	b.n	900023c2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
900022ce:	68fb      	ldr	r3, [r7, #12]
900022d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
900022d4:	2b01      	cmp	r3, #1
900022d6:	d101      	bne.n	900022dc <HAL_UART_Transmit+0x38>
900022d8:	2302      	movs	r3, #2
900022da:	e072      	b.n	900023c2 <HAL_UART_Transmit+0x11e>
900022dc:	68fb      	ldr	r3, [r7, #12]
900022de:	2201      	movs	r2, #1
900022e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
900022e4:	68fb      	ldr	r3, [r7, #12]
900022e6:	2200      	movs	r2, #0
900022e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
900022ec:	68fb      	ldr	r3, [r7, #12]
900022ee:	2221      	movs	r2, #33	; 0x21
900022f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
900022f2:	f7fe ffb7 	bl	90001264 <HAL_GetTick>
900022f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
900022f8:	68fb      	ldr	r3, [r7, #12]
900022fa:	88fa      	ldrh	r2, [r7, #6]
900022fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
90002300:	68fb      	ldr	r3, [r7, #12]
90002302:	88fa      	ldrh	r2, [r7, #6]
90002304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90002308:	68fb      	ldr	r3, [r7, #12]
9000230a:	689b      	ldr	r3, [r3, #8]
9000230c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90002310:	d108      	bne.n	90002324 <HAL_UART_Transmit+0x80>
90002312:	68fb      	ldr	r3, [r7, #12]
90002314:	691b      	ldr	r3, [r3, #16]
90002316:	2b00      	cmp	r3, #0
90002318:	d104      	bne.n	90002324 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
9000231a:	2300      	movs	r3, #0
9000231c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
9000231e:	68bb      	ldr	r3, [r7, #8]
90002320:	61bb      	str	r3, [r7, #24]
90002322:	e003      	b.n	9000232c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
90002324:	68bb      	ldr	r3, [r7, #8]
90002326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
90002328:	2300      	movs	r3, #0
9000232a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
9000232c:	68fb      	ldr	r3, [r7, #12]
9000232e:	2200      	movs	r2, #0
90002330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
90002334:	e02c      	b.n	90002390 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
90002336:	683b      	ldr	r3, [r7, #0]
90002338:	9300      	str	r3, [sp, #0]
9000233a:	697b      	ldr	r3, [r7, #20]
9000233c:	2200      	movs	r2, #0
9000233e:	2180      	movs	r1, #128	; 0x80
90002340:	68f8      	ldr	r0, [r7, #12]
90002342:	f000 fb7a 	bl	90002a3a <UART_WaitOnFlagUntilTimeout>
90002346:	4603      	mov	r3, r0
90002348:	2b00      	cmp	r3, #0
9000234a:	d001      	beq.n	90002350 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
9000234c:	2303      	movs	r3, #3
9000234e:	e038      	b.n	900023c2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
90002350:	69fb      	ldr	r3, [r7, #28]
90002352:	2b00      	cmp	r3, #0
90002354:	d10b      	bne.n	9000236e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
90002356:	69bb      	ldr	r3, [r7, #24]
90002358:	881b      	ldrh	r3, [r3, #0]
9000235a:	461a      	mov	r2, r3
9000235c:	68fb      	ldr	r3, [r7, #12]
9000235e:	681b      	ldr	r3, [r3, #0]
90002360:	f3c2 0208 	ubfx	r2, r2, #0, #9
90002364:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
90002366:	69bb      	ldr	r3, [r7, #24]
90002368:	3302      	adds	r3, #2
9000236a:	61bb      	str	r3, [r7, #24]
9000236c:	e007      	b.n	9000237e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
9000236e:	69fb      	ldr	r3, [r7, #28]
90002370:	781a      	ldrb	r2, [r3, #0]
90002372:	68fb      	ldr	r3, [r7, #12]
90002374:	681b      	ldr	r3, [r3, #0]
90002376:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
90002378:	69fb      	ldr	r3, [r7, #28]
9000237a:	3301      	adds	r3, #1
9000237c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
9000237e:	68fb      	ldr	r3, [r7, #12]
90002380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
90002384:	b29b      	uxth	r3, r3
90002386:	3b01      	subs	r3, #1
90002388:	b29a      	uxth	r2, r3
9000238a:	68fb      	ldr	r3, [r7, #12]
9000238c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
90002390:	68fb      	ldr	r3, [r7, #12]
90002392:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
90002396:	b29b      	uxth	r3, r3
90002398:	2b00      	cmp	r3, #0
9000239a:	d1cc      	bne.n	90002336 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
9000239c:	683b      	ldr	r3, [r7, #0]
9000239e:	9300      	str	r3, [sp, #0]
900023a0:	697b      	ldr	r3, [r7, #20]
900023a2:	2200      	movs	r2, #0
900023a4:	2140      	movs	r1, #64	; 0x40
900023a6:	68f8      	ldr	r0, [r7, #12]
900023a8:	f000 fb47 	bl	90002a3a <UART_WaitOnFlagUntilTimeout>
900023ac:	4603      	mov	r3, r0
900023ae:	2b00      	cmp	r3, #0
900023b0:	d001      	beq.n	900023b6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
900023b2:	2303      	movs	r3, #3
900023b4:	e005      	b.n	900023c2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
900023b6:	68fb      	ldr	r3, [r7, #12]
900023b8:	2220      	movs	r2, #32
900023ba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
900023bc:	2300      	movs	r3, #0
900023be:	e000      	b.n	900023c2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
900023c0:	2302      	movs	r3, #2
  }
}
900023c2:	4618      	mov	r0, r3
900023c4:	3720      	adds	r7, #32
900023c6:	46bd      	mov	sp, r7
900023c8:	bd80      	pop	{r7, pc}
	...

900023cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
900023cc:	b580      	push	{r7, lr}
900023ce:	b088      	sub	sp, #32
900023d0:	af00      	add	r7, sp, #0
900023d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
900023d4:	2300      	movs	r3, #0
900023d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
900023d8:	687b      	ldr	r3, [r7, #4]
900023da:	689a      	ldr	r2, [r3, #8]
900023dc:	687b      	ldr	r3, [r7, #4]
900023de:	691b      	ldr	r3, [r3, #16]
900023e0:	431a      	orrs	r2, r3
900023e2:	687b      	ldr	r3, [r7, #4]
900023e4:	695b      	ldr	r3, [r3, #20]
900023e6:	431a      	orrs	r2, r3
900023e8:	687b      	ldr	r3, [r7, #4]
900023ea:	69db      	ldr	r3, [r3, #28]
900023ec:	4313      	orrs	r3, r2
900023ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
900023f0:	687b      	ldr	r3, [r7, #4]
900023f2:	681b      	ldr	r3, [r3, #0]
900023f4:	681a      	ldr	r2, [r3, #0]
900023f6:	4ba7      	ldr	r3, [pc, #668]	; (90002694 <UART_SetConfig+0x2c8>)
900023f8:	4013      	ands	r3, r2
900023fa:	687a      	ldr	r2, [r7, #4]
900023fc:	6812      	ldr	r2, [r2, #0]
900023fe:	6979      	ldr	r1, [r7, #20]
90002400:	430b      	orrs	r3, r1
90002402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
90002404:	687b      	ldr	r3, [r7, #4]
90002406:	681b      	ldr	r3, [r3, #0]
90002408:	685b      	ldr	r3, [r3, #4]
9000240a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
9000240e:	687b      	ldr	r3, [r7, #4]
90002410:	68da      	ldr	r2, [r3, #12]
90002412:	687b      	ldr	r3, [r7, #4]
90002414:	681b      	ldr	r3, [r3, #0]
90002416:	430a      	orrs	r2, r1
90002418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
9000241a:	687b      	ldr	r3, [r7, #4]
9000241c:	699b      	ldr	r3, [r3, #24]
9000241e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
90002420:	687b      	ldr	r3, [r7, #4]
90002422:	6a1b      	ldr	r3, [r3, #32]
90002424:	697a      	ldr	r2, [r7, #20]
90002426:	4313      	orrs	r3, r2
90002428:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000242a:	687b      	ldr	r3, [r7, #4]
9000242c:	681b      	ldr	r3, [r3, #0]
9000242e:	689b      	ldr	r3, [r3, #8]
90002430:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
90002434:	687b      	ldr	r3, [r7, #4]
90002436:	681b      	ldr	r3, [r3, #0]
90002438:	697a      	ldr	r2, [r7, #20]
9000243a:	430a      	orrs	r2, r1
9000243c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
9000243e:	687b      	ldr	r3, [r7, #4]
90002440:	681b      	ldr	r3, [r3, #0]
90002442:	4a95      	ldr	r2, [pc, #596]	; (90002698 <UART_SetConfig+0x2cc>)
90002444:	4293      	cmp	r3, r2
90002446:	d120      	bne.n	9000248a <UART_SetConfig+0xbe>
90002448:	4b94      	ldr	r3, [pc, #592]	; (9000269c <UART_SetConfig+0x2d0>)
9000244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000244e:	f003 0303 	and.w	r3, r3, #3
90002452:	2b03      	cmp	r3, #3
90002454:	d816      	bhi.n	90002484 <UART_SetConfig+0xb8>
90002456:	a201      	add	r2, pc, #4	; (adr r2, 9000245c <UART_SetConfig+0x90>)
90002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000245c:	9000246d 	.word	0x9000246d
90002460:	90002479 	.word	0x90002479
90002464:	90002473 	.word	0x90002473
90002468:	9000247f 	.word	0x9000247f
9000246c:	2301      	movs	r3, #1
9000246e:	77fb      	strb	r3, [r7, #31]
90002470:	e14f      	b.n	90002712 <UART_SetConfig+0x346>
90002472:	2302      	movs	r3, #2
90002474:	77fb      	strb	r3, [r7, #31]
90002476:	e14c      	b.n	90002712 <UART_SetConfig+0x346>
90002478:	2304      	movs	r3, #4
9000247a:	77fb      	strb	r3, [r7, #31]
9000247c:	e149      	b.n	90002712 <UART_SetConfig+0x346>
9000247e:	2308      	movs	r3, #8
90002480:	77fb      	strb	r3, [r7, #31]
90002482:	e146      	b.n	90002712 <UART_SetConfig+0x346>
90002484:	2310      	movs	r3, #16
90002486:	77fb      	strb	r3, [r7, #31]
90002488:	e143      	b.n	90002712 <UART_SetConfig+0x346>
9000248a:	687b      	ldr	r3, [r7, #4]
9000248c:	681b      	ldr	r3, [r3, #0]
9000248e:	4a84      	ldr	r2, [pc, #528]	; (900026a0 <UART_SetConfig+0x2d4>)
90002490:	4293      	cmp	r3, r2
90002492:	d132      	bne.n	900024fa <UART_SetConfig+0x12e>
90002494:	4b81      	ldr	r3, [pc, #516]	; (9000269c <UART_SetConfig+0x2d0>)
90002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000249a:	f003 030c 	and.w	r3, r3, #12
9000249e:	2b0c      	cmp	r3, #12
900024a0:	d828      	bhi.n	900024f4 <UART_SetConfig+0x128>
900024a2:	a201      	add	r2, pc, #4	; (adr r2, 900024a8 <UART_SetConfig+0xdc>)
900024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900024a8:	900024dd 	.word	0x900024dd
900024ac:	900024f5 	.word	0x900024f5
900024b0:	900024f5 	.word	0x900024f5
900024b4:	900024f5 	.word	0x900024f5
900024b8:	900024e9 	.word	0x900024e9
900024bc:	900024f5 	.word	0x900024f5
900024c0:	900024f5 	.word	0x900024f5
900024c4:	900024f5 	.word	0x900024f5
900024c8:	900024e3 	.word	0x900024e3
900024cc:	900024f5 	.word	0x900024f5
900024d0:	900024f5 	.word	0x900024f5
900024d4:	900024f5 	.word	0x900024f5
900024d8:	900024ef 	.word	0x900024ef
900024dc:	2300      	movs	r3, #0
900024de:	77fb      	strb	r3, [r7, #31]
900024e0:	e117      	b.n	90002712 <UART_SetConfig+0x346>
900024e2:	2302      	movs	r3, #2
900024e4:	77fb      	strb	r3, [r7, #31]
900024e6:	e114      	b.n	90002712 <UART_SetConfig+0x346>
900024e8:	2304      	movs	r3, #4
900024ea:	77fb      	strb	r3, [r7, #31]
900024ec:	e111      	b.n	90002712 <UART_SetConfig+0x346>
900024ee:	2308      	movs	r3, #8
900024f0:	77fb      	strb	r3, [r7, #31]
900024f2:	e10e      	b.n	90002712 <UART_SetConfig+0x346>
900024f4:	2310      	movs	r3, #16
900024f6:	77fb      	strb	r3, [r7, #31]
900024f8:	e10b      	b.n	90002712 <UART_SetConfig+0x346>
900024fa:	687b      	ldr	r3, [r7, #4]
900024fc:	681b      	ldr	r3, [r3, #0]
900024fe:	4a69      	ldr	r2, [pc, #420]	; (900026a4 <UART_SetConfig+0x2d8>)
90002500:	4293      	cmp	r3, r2
90002502:	d120      	bne.n	90002546 <UART_SetConfig+0x17a>
90002504:	4b65      	ldr	r3, [pc, #404]	; (9000269c <UART_SetConfig+0x2d0>)
90002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000250a:	f003 0330 	and.w	r3, r3, #48	; 0x30
9000250e:	2b30      	cmp	r3, #48	; 0x30
90002510:	d013      	beq.n	9000253a <UART_SetConfig+0x16e>
90002512:	2b30      	cmp	r3, #48	; 0x30
90002514:	d814      	bhi.n	90002540 <UART_SetConfig+0x174>
90002516:	2b20      	cmp	r3, #32
90002518:	d009      	beq.n	9000252e <UART_SetConfig+0x162>
9000251a:	2b20      	cmp	r3, #32
9000251c:	d810      	bhi.n	90002540 <UART_SetConfig+0x174>
9000251e:	2b00      	cmp	r3, #0
90002520:	d002      	beq.n	90002528 <UART_SetConfig+0x15c>
90002522:	2b10      	cmp	r3, #16
90002524:	d006      	beq.n	90002534 <UART_SetConfig+0x168>
90002526:	e00b      	b.n	90002540 <UART_SetConfig+0x174>
90002528:	2300      	movs	r3, #0
9000252a:	77fb      	strb	r3, [r7, #31]
9000252c:	e0f1      	b.n	90002712 <UART_SetConfig+0x346>
9000252e:	2302      	movs	r3, #2
90002530:	77fb      	strb	r3, [r7, #31]
90002532:	e0ee      	b.n	90002712 <UART_SetConfig+0x346>
90002534:	2304      	movs	r3, #4
90002536:	77fb      	strb	r3, [r7, #31]
90002538:	e0eb      	b.n	90002712 <UART_SetConfig+0x346>
9000253a:	2308      	movs	r3, #8
9000253c:	77fb      	strb	r3, [r7, #31]
9000253e:	e0e8      	b.n	90002712 <UART_SetConfig+0x346>
90002540:	2310      	movs	r3, #16
90002542:	77fb      	strb	r3, [r7, #31]
90002544:	e0e5      	b.n	90002712 <UART_SetConfig+0x346>
90002546:	687b      	ldr	r3, [r7, #4]
90002548:	681b      	ldr	r3, [r3, #0]
9000254a:	4a57      	ldr	r2, [pc, #348]	; (900026a8 <UART_SetConfig+0x2dc>)
9000254c:	4293      	cmp	r3, r2
9000254e:	d120      	bne.n	90002592 <UART_SetConfig+0x1c6>
90002550:	4b52      	ldr	r3, [pc, #328]	; (9000269c <UART_SetConfig+0x2d0>)
90002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90002556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
9000255a:	2bc0      	cmp	r3, #192	; 0xc0
9000255c:	d013      	beq.n	90002586 <UART_SetConfig+0x1ba>
9000255e:	2bc0      	cmp	r3, #192	; 0xc0
90002560:	d814      	bhi.n	9000258c <UART_SetConfig+0x1c0>
90002562:	2b80      	cmp	r3, #128	; 0x80
90002564:	d009      	beq.n	9000257a <UART_SetConfig+0x1ae>
90002566:	2b80      	cmp	r3, #128	; 0x80
90002568:	d810      	bhi.n	9000258c <UART_SetConfig+0x1c0>
9000256a:	2b00      	cmp	r3, #0
9000256c:	d002      	beq.n	90002574 <UART_SetConfig+0x1a8>
9000256e:	2b40      	cmp	r3, #64	; 0x40
90002570:	d006      	beq.n	90002580 <UART_SetConfig+0x1b4>
90002572:	e00b      	b.n	9000258c <UART_SetConfig+0x1c0>
90002574:	2300      	movs	r3, #0
90002576:	77fb      	strb	r3, [r7, #31]
90002578:	e0cb      	b.n	90002712 <UART_SetConfig+0x346>
9000257a:	2302      	movs	r3, #2
9000257c:	77fb      	strb	r3, [r7, #31]
9000257e:	e0c8      	b.n	90002712 <UART_SetConfig+0x346>
90002580:	2304      	movs	r3, #4
90002582:	77fb      	strb	r3, [r7, #31]
90002584:	e0c5      	b.n	90002712 <UART_SetConfig+0x346>
90002586:	2308      	movs	r3, #8
90002588:	77fb      	strb	r3, [r7, #31]
9000258a:	e0c2      	b.n	90002712 <UART_SetConfig+0x346>
9000258c:	2310      	movs	r3, #16
9000258e:	77fb      	strb	r3, [r7, #31]
90002590:	e0bf      	b.n	90002712 <UART_SetConfig+0x346>
90002592:	687b      	ldr	r3, [r7, #4]
90002594:	681b      	ldr	r3, [r3, #0]
90002596:	4a45      	ldr	r2, [pc, #276]	; (900026ac <UART_SetConfig+0x2e0>)
90002598:	4293      	cmp	r3, r2
9000259a:	d125      	bne.n	900025e8 <UART_SetConfig+0x21c>
9000259c:	4b3f      	ldr	r3, [pc, #252]	; (9000269c <UART_SetConfig+0x2d0>)
9000259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900025a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
900025a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
900025aa:	d017      	beq.n	900025dc <UART_SetConfig+0x210>
900025ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
900025b0:	d817      	bhi.n	900025e2 <UART_SetConfig+0x216>
900025b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900025b6:	d00b      	beq.n	900025d0 <UART_SetConfig+0x204>
900025b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900025bc:	d811      	bhi.n	900025e2 <UART_SetConfig+0x216>
900025be:	2b00      	cmp	r3, #0
900025c0:	d003      	beq.n	900025ca <UART_SetConfig+0x1fe>
900025c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
900025c6:	d006      	beq.n	900025d6 <UART_SetConfig+0x20a>
900025c8:	e00b      	b.n	900025e2 <UART_SetConfig+0x216>
900025ca:	2300      	movs	r3, #0
900025cc:	77fb      	strb	r3, [r7, #31]
900025ce:	e0a0      	b.n	90002712 <UART_SetConfig+0x346>
900025d0:	2302      	movs	r3, #2
900025d2:	77fb      	strb	r3, [r7, #31]
900025d4:	e09d      	b.n	90002712 <UART_SetConfig+0x346>
900025d6:	2304      	movs	r3, #4
900025d8:	77fb      	strb	r3, [r7, #31]
900025da:	e09a      	b.n	90002712 <UART_SetConfig+0x346>
900025dc:	2308      	movs	r3, #8
900025de:	77fb      	strb	r3, [r7, #31]
900025e0:	e097      	b.n	90002712 <UART_SetConfig+0x346>
900025e2:	2310      	movs	r3, #16
900025e4:	77fb      	strb	r3, [r7, #31]
900025e6:	e094      	b.n	90002712 <UART_SetConfig+0x346>
900025e8:	687b      	ldr	r3, [r7, #4]
900025ea:	681b      	ldr	r3, [r3, #0]
900025ec:	4a30      	ldr	r2, [pc, #192]	; (900026b0 <UART_SetConfig+0x2e4>)
900025ee:	4293      	cmp	r3, r2
900025f0:	d125      	bne.n	9000263e <UART_SetConfig+0x272>
900025f2:	4b2a      	ldr	r3, [pc, #168]	; (9000269c <UART_SetConfig+0x2d0>)
900025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900025f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
900025fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90002600:	d017      	beq.n	90002632 <UART_SetConfig+0x266>
90002602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
90002606:	d817      	bhi.n	90002638 <UART_SetConfig+0x26c>
90002608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
9000260c:	d00b      	beq.n	90002626 <UART_SetConfig+0x25a>
9000260e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90002612:	d811      	bhi.n	90002638 <UART_SetConfig+0x26c>
90002614:	2b00      	cmp	r3, #0
90002616:	d003      	beq.n	90002620 <UART_SetConfig+0x254>
90002618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
9000261c:	d006      	beq.n	9000262c <UART_SetConfig+0x260>
9000261e:	e00b      	b.n	90002638 <UART_SetConfig+0x26c>
90002620:	2301      	movs	r3, #1
90002622:	77fb      	strb	r3, [r7, #31]
90002624:	e075      	b.n	90002712 <UART_SetConfig+0x346>
90002626:	2302      	movs	r3, #2
90002628:	77fb      	strb	r3, [r7, #31]
9000262a:	e072      	b.n	90002712 <UART_SetConfig+0x346>
9000262c:	2304      	movs	r3, #4
9000262e:	77fb      	strb	r3, [r7, #31]
90002630:	e06f      	b.n	90002712 <UART_SetConfig+0x346>
90002632:	2308      	movs	r3, #8
90002634:	77fb      	strb	r3, [r7, #31]
90002636:	e06c      	b.n	90002712 <UART_SetConfig+0x346>
90002638:	2310      	movs	r3, #16
9000263a:	77fb      	strb	r3, [r7, #31]
9000263c:	e069      	b.n	90002712 <UART_SetConfig+0x346>
9000263e:	687b      	ldr	r3, [r7, #4]
90002640:	681b      	ldr	r3, [r3, #0]
90002642:	4a1c      	ldr	r2, [pc, #112]	; (900026b4 <UART_SetConfig+0x2e8>)
90002644:	4293      	cmp	r3, r2
90002646:	d137      	bne.n	900026b8 <UART_SetConfig+0x2ec>
90002648:	4b14      	ldr	r3, [pc, #80]	; (9000269c <UART_SetConfig+0x2d0>)
9000264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000264e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
90002652:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
90002656:	d017      	beq.n	90002688 <UART_SetConfig+0x2bc>
90002658:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
9000265c:	d817      	bhi.n	9000268e <UART_SetConfig+0x2c2>
9000265e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90002662:	d00b      	beq.n	9000267c <UART_SetConfig+0x2b0>
90002664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
90002668:	d811      	bhi.n	9000268e <UART_SetConfig+0x2c2>
9000266a:	2b00      	cmp	r3, #0
9000266c:	d003      	beq.n	90002676 <UART_SetConfig+0x2aa>
9000266e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90002672:	d006      	beq.n	90002682 <UART_SetConfig+0x2b6>
90002674:	e00b      	b.n	9000268e <UART_SetConfig+0x2c2>
90002676:	2300      	movs	r3, #0
90002678:	77fb      	strb	r3, [r7, #31]
9000267a:	e04a      	b.n	90002712 <UART_SetConfig+0x346>
9000267c:	2302      	movs	r3, #2
9000267e:	77fb      	strb	r3, [r7, #31]
90002680:	e047      	b.n	90002712 <UART_SetConfig+0x346>
90002682:	2304      	movs	r3, #4
90002684:	77fb      	strb	r3, [r7, #31]
90002686:	e044      	b.n	90002712 <UART_SetConfig+0x346>
90002688:	2308      	movs	r3, #8
9000268a:	77fb      	strb	r3, [r7, #31]
9000268c:	e041      	b.n	90002712 <UART_SetConfig+0x346>
9000268e:	2310      	movs	r3, #16
90002690:	77fb      	strb	r3, [r7, #31]
90002692:	e03e      	b.n	90002712 <UART_SetConfig+0x346>
90002694:	efff69f3 	.word	0xefff69f3
90002698:	40011000 	.word	0x40011000
9000269c:	40023800 	.word	0x40023800
900026a0:	40004400 	.word	0x40004400
900026a4:	40004800 	.word	0x40004800
900026a8:	40004c00 	.word	0x40004c00
900026ac:	40005000 	.word	0x40005000
900026b0:	40011400 	.word	0x40011400
900026b4:	40007800 	.word	0x40007800
900026b8:	687b      	ldr	r3, [r7, #4]
900026ba:	681b      	ldr	r3, [r3, #0]
900026bc:	4a71      	ldr	r2, [pc, #452]	; (90002884 <UART_SetConfig+0x4b8>)
900026be:	4293      	cmp	r3, r2
900026c0:	d125      	bne.n	9000270e <UART_SetConfig+0x342>
900026c2:	4b71      	ldr	r3, [pc, #452]	; (90002888 <UART_SetConfig+0x4bc>)
900026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900026c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
900026cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
900026d0:	d017      	beq.n	90002702 <UART_SetConfig+0x336>
900026d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
900026d6:	d817      	bhi.n	90002708 <UART_SetConfig+0x33c>
900026d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
900026dc:	d00b      	beq.n	900026f6 <UART_SetConfig+0x32a>
900026de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
900026e2:	d811      	bhi.n	90002708 <UART_SetConfig+0x33c>
900026e4:	2b00      	cmp	r3, #0
900026e6:	d003      	beq.n	900026f0 <UART_SetConfig+0x324>
900026e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
900026ec:	d006      	beq.n	900026fc <UART_SetConfig+0x330>
900026ee:	e00b      	b.n	90002708 <UART_SetConfig+0x33c>
900026f0:	2300      	movs	r3, #0
900026f2:	77fb      	strb	r3, [r7, #31]
900026f4:	e00d      	b.n	90002712 <UART_SetConfig+0x346>
900026f6:	2302      	movs	r3, #2
900026f8:	77fb      	strb	r3, [r7, #31]
900026fa:	e00a      	b.n	90002712 <UART_SetConfig+0x346>
900026fc:	2304      	movs	r3, #4
900026fe:	77fb      	strb	r3, [r7, #31]
90002700:	e007      	b.n	90002712 <UART_SetConfig+0x346>
90002702:	2308      	movs	r3, #8
90002704:	77fb      	strb	r3, [r7, #31]
90002706:	e004      	b.n	90002712 <UART_SetConfig+0x346>
90002708:	2310      	movs	r3, #16
9000270a:	77fb      	strb	r3, [r7, #31]
9000270c:	e001      	b.n	90002712 <UART_SetConfig+0x346>
9000270e:	2310      	movs	r3, #16
90002710:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
90002712:	687b      	ldr	r3, [r7, #4]
90002714:	69db      	ldr	r3, [r3, #28]
90002716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
9000271a:	d15b      	bne.n	900027d4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
9000271c:	7ffb      	ldrb	r3, [r7, #31]
9000271e:	2b08      	cmp	r3, #8
90002720:	d827      	bhi.n	90002772 <UART_SetConfig+0x3a6>
90002722:	a201      	add	r2, pc, #4	; (adr r2, 90002728 <UART_SetConfig+0x35c>)
90002724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90002728:	9000274d 	.word	0x9000274d
9000272c:	90002755 	.word	0x90002755
90002730:	9000275d 	.word	0x9000275d
90002734:	90002773 	.word	0x90002773
90002738:	90002763 	.word	0x90002763
9000273c:	90002773 	.word	0x90002773
90002740:	90002773 	.word	0x90002773
90002744:	90002773 	.word	0x90002773
90002748:	9000276b 	.word	0x9000276b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
9000274c:	f7ff fd34 	bl	900021b8 <HAL_RCC_GetPCLK1Freq>
90002750:	61b8      	str	r0, [r7, #24]
        break;
90002752:	e013      	b.n	9000277c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
90002754:	f7ff fd44 	bl	900021e0 <HAL_RCC_GetPCLK2Freq>
90002758:	61b8      	str	r0, [r7, #24]
        break;
9000275a:	e00f      	b.n	9000277c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
9000275c:	4b4b      	ldr	r3, [pc, #300]	; (9000288c <UART_SetConfig+0x4c0>)
9000275e:	61bb      	str	r3, [r7, #24]
        break;
90002760:	e00c      	b.n	9000277c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
90002762:	f7ff fc67 	bl	90002034 <HAL_RCC_GetSysClockFreq>
90002766:	61b8      	str	r0, [r7, #24]
        break;
90002768:	e008      	b.n	9000277c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
9000276a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9000276e:	61bb      	str	r3, [r7, #24]
        break;
90002770:	e004      	b.n	9000277c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
90002772:	2300      	movs	r3, #0
90002774:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
90002776:	2301      	movs	r3, #1
90002778:	77bb      	strb	r3, [r7, #30]
        break;
9000277a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
9000277c:	69bb      	ldr	r3, [r7, #24]
9000277e:	2b00      	cmp	r3, #0
90002780:	d074      	beq.n	9000286c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
90002782:	69bb      	ldr	r3, [r7, #24]
90002784:	005a      	lsls	r2, r3, #1
90002786:	687b      	ldr	r3, [r7, #4]
90002788:	685b      	ldr	r3, [r3, #4]
9000278a:	085b      	lsrs	r3, r3, #1
9000278c:	441a      	add	r2, r3
9000278e:	687b      	ldr	r3, [r7, #4]
90002790:	685b      	ldr	r3, [r3, #4]
90002792:	fbb2 f3f3 	udiv	r3, r2, r3
90002796:	b29b      	uxth	r3, r3
90002798:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9000279a:	693b      	ldr	r3, [r7, #16]
9000279c:	2b0f      	cmp	r3, #15
9000279e:	d916      	bls.n	900027ce <UART_SetConfig+0x402>
900027a0:	693b      	ldr	r3, [r7, #16]
900027a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900027a6:	d212      	bcs.n	900027ce <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
900027a8:	693b      	ldr	r3, [r7, #16]
900027aa:	b29b      	uxth	r3, r3
900027ac:	f023 030f 	bic.w	r3, r3, #15
900027b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
900027b2:	693b      	ldr	r3, [r7, #16]
900027b4:	085b      	lsrs	r3, r3, #1
900027b6:	b29b      	uxth	r3, r3
900027b8:	f003 0307 	and.w	r3, r3, #7
900027bc:	b29a      	uxth	r2, r3
900027be:	89fb      	ldrh	r3, [r7, #14]
900027c0:	4313      	orrs	r3, r2
900027c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
900027c4:	687b      	ldr	r3, [r7, #4]
900027c6:	681b      	ldr	r3, [r3, #0]
900027c8:	89fa      	ldrh	r2, [r7, #14]
900027ca:	60da      	str	r2, [r3, #12]
900027cc:	e04e      	b.n	9000286c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
900027ce:	2301      	movs	r3, #1
900027d0:	77bb      	strb	r3, [r7, #30]
900027d2:	e04b      	b.n	9000286c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
900027d4:	7ffb      	ldrb	r3, [r7, #31]
900027d6:	2b08      	cmp	r3, #8
900027d8:	d827      	bhi.n	9000282a <UART_SetConfig+0x45e>
900027da:	a201      	add	r2, pc, #4	; (adr r2, 900027e0 <UART_SetConfig+0x414>)
900027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
900027e0:	90002805 	.word	0x90002805
900027e4:	9000280d 	.word	0x9000280d
900027e8:	90002815 	.word	0x90002815
900027ec:	9000282b 	.word	0x9000282b
900027f0:	9000281b 	.word	0x9000281b
900027f4:	9000282b 	.word	0x9000282b
900027f8:	9000282b 	.word	0x9000282b
900027fc:	9000282b 	.word	0x9000282b
90002800:	90002823 	.word	0x90002823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
90002804:	f7ff fcd8 	bl	900021b8 <HAL_RCC_GetPCLK1Freq>
90002808:	61b8      	str	r0, [r7, #24]
        break;
9000280a:	e013      	b.n	90002834 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
9000280c:	f7ff fce8 	bl	900021e0 <HAL_RCC_GetPCLK2Freq>
90002810:	61b8      	str	r0, [r7, #24]
        break;
90002812:	e00f      	b.n	90002834 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
90002814:	4b1d      	ldr	r3, [pc, #116]	; (9000288c <UART_SetConfig+0x4c0>)
90002816:	61bb      	str	r3, [r7, #24]
        break;
90002818:	e00c      	b.n	90002834 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
9000281a:	f7ff fc0b 	bl	90002034 <HAL_RCC_GetSysClockFreq>
9000281e:	61b8      	str	r0, [r7, #24]
        break;
90002820:	e008      	b.n	90002834 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
90002822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90002826:	61bb      	str	r3, [r7, #24]
        break;
90002828:	e004      	b.n	90002834 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
9000282a:	2300      	movs	r3, #0
9000282c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
9000282e:	2301      	movs	r3, #1
90002830:	77bb      	strb	r3, [r7, #30]
        break;
90002832:	bf00      	nop
    }

    if (pclk != 0U)
90002834:	69bb      	ldr	r3, [r7, #24]
90002836:	2b00      	cmp	r3, #0
90002838:	d018      	beq.n	9000286c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
9000283a:	687b      	ldr	r3, [r7, #4]
9000283c:	685b      	ldr	r3, [r3, #4]
9000283e:	085a      	lsrs	r2, r3, #1
90002840:	69bb      	ldr	r3, [r7, #24]
90002842:	441a      	add	r2, r3
90002844:	687b      	ldr	r3, [r7, #4]
90002846:	685b      	ldr	r3, [r3, #4]
90002848:	fbb2 f3f3 	udiv	r3, r2, r3
9000284c:	b29b      	uxth	r3, r3
9000284e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90002850:	693b      	ldr	r3, [r7, #16]
90002852:	2b0f      	cmp	r3, #15
90002854:	d908      	bls.n	90002868 <UART_SetConfig+0x49c>
90002856:	693b      	ldr	r3, [r7, #16]
90002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000285c:	d204      	bcs.n	90002868 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
9000285e:	687b      	ldr	r3, [r7, #4]
90002860:	681b      	ldr	r3, [r3, #0]
90002862:	693a      	ldr	r2, [r7, #16]
90002864:	60da      	str	r2, [r3, #12]
90002866:	e001      	b.n	9000286c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
90002868:	2301      	movs	r3, #1
9000286a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
9000286c:	687b      	ldr	r3, [r7, #4]
9000286e:	2200      	movs	r2, #0
90002870:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
90002872:	687b      	ldr	r3, [r7, #4]
90002874:	2200      	movs	r2, #0
90002876:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
90002878:	7fbb      	ldrb	r3, [r7, #30]
}
9000287a:	4618      	mov	r0, r3
9000287c:	3720      	adds	r7, #32
9000287e:	46bd      	mov	sp, r7
90002880:	bd80      	pop	{r7, pc}
90002882:	bf00      	nop
90002884:	40007c00 	.word	0x40007c00
90002888:	40023800 	.word	0x40023800
9000288c:	00f42400 	.word	0x00f42400

90002890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
90002890:	b480      	push	{r7}
90002892:	b083      	sub	sp, #12
90002894:	af00      	add	r7, sp, #0
90002896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
90002898:	687b      	ldr	r3, [r7, #4]
9000289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000289c:	f003 0301 	and.w	r3, r3, #1
900028a0:	2b00      	cmp	r3, #0
900028a2:	d00a      	beq.n	900028ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
900028a4:	687b      	ldr	r3, [r7, #4]
900028a6:	681b      	ldr	r3, [r3, #0]
900028a8:	685b      	ldr	r3, [r3, #4]
900028aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
900028ae:	687b      	ldr	r3, [r7, #4]
900028b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
900028b2:	687b      	ldr	r3, [r7, #4]
900028b4:	681b      	ldr	r3, [r3, #0]
900028b6:	430a      	orrs	r2, r1
900028b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
900028ba:	687b      	ldr	r3, [r7, #4]
900028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900028be:	f003 0302 	and.w	r3, r3, #2
900028c2:	2b00      	cmp	r3, #0
900028c4:	d00a      	beq.n	900028dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
900028c6:	687b      	ldr	r3, [r7, #4]
900028c8:	681b      	ldr	r3, [r3, #0]
900028ca:	685b      	ldr	r3, [r3, #4]
900028cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
900028d0:	687b      	ldr	r3, [r7, #4]
900028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900028d4:	687b      	ldr	r3, [r7, #4]
900028d6:	681b      	ldr	r3, [r3, #0]
900028d8:	430a      	orrs	r2, r1
900028da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
900028dc:	687b      	ldr	r3, [r7, #4]
900028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900028e0:	f003 0304 	and.w	r3, r3, #4
900028e4:	2b00      	cmp	r3, #0
900028e6:	d00a      	beq.n	900028fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
900028e8:	687b      	ldr	r3, [r7, #4]
900028ea:	681b      	ldr	r3, [r3, #0]
900028ec:	685b      	ldr	r3, [r3, #4]
900028ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
900028f2:	687b      	ldr	r3, [r7, #4]
900028f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900028f6:	687b      	ldr	r3, [r7, #4]
900028f8:	681b      	ldr	r3, [r3, #0]
900028fa:	430a      	orrs	r2, r1
900028fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
900028fe:	687b      	ldr	r3, [r7, #4]
90002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002902:	f003 0308 	and.w	r3, r3, #8
90002906:	2b00      	cmp	r3, #0
90002908:	d00a      	beq.n	90002920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9000290a:	687b      	ldr	r3, [r7, #4]
9000290c:	681b      	ldr	r3, [r3, #0]
9000290e:	685b      	ldr	r3, [r3, #4]
90002910:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
90002914:	687b      	ldr	r3, [r7, #4]
90002916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90002918:	687b      	ldr	r3, [r7, #4]
9000291a:	681b      	ldr	r3, [r3, #0]
9000291c:	430a      	orrs	r2, r1
9000291e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
90002920:	687b      	ldr	r3, [r7, #4]
90002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002924:	f003 0310 	and.w	r3, r3, #16
90002928:	2b00      	cmp	r3, #0
9000292a:	d00a      	beq.n	90002942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9000292c:	687b      	ldr	r3, [r7, #4]
9000292e:	681b      	ldr	r3, [r3, #0]
90002930:	689b      	ldr	r3, [r3, #8]
90002932:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
90002936:	687b      	ldr	r3, [r7, #4]
90002938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000293a:	687b      	ldr	r3, [r7, #4]
9000293c:	681b      	ldr	r3, [r3, #0]
9000293e:	430a      	orrs	r2, r1
90002940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
90002942:	687b      	ldr	r3, [r7, #4]
90002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002946:	f003 0320 	and.w	r3, r3, #32
9000294a:	2b00      	cmp	r3, #0
9000294c:	d00a      	beq.n	90002964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9000294e:	687b      	ldr	r3, [r7, #4]
90002950:	681b      	ldr	r3, [r3, #0]
90002952:	689b      	ldr	r3, [r3, #8]
90002954:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
90002958:	687b      	ldr	r3, [r7, #4]
9000295a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000295c:	687b      	ldr	r3, [r7, #4]
9000295e:	681b      	ldr	r3, [r3, #0]
90002960:	430a      	orrs	r2, r1
90002962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
90002964:	687b      	ldr	r3, [r7, #4]
90002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002968:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000296c:	2b00      	cmp	r3, #0
9000296e:	d01a      	beq.n	900029a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
90002970:	687b      	ldr	r3, [r7, #4]
90002972:	681b      	ldr	r3, [r3, #0]
90002974:	685b      	ldr	r3, [r3, #4]
90002976:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
9000297a:	687b      	ldr	r3, [r7, #4]
9000297c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
9000297e:	687b      	ldr	r3, [r7, #4]
90002980:	681b      	ldr	r3, [r3, #0]
90002982:	430a      	orrs	r2, r1
90002984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
90002986:	687b      	ldr	r3, [r7, #4]
90002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000298a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
9000298e:	d10a      	bne.n	900029a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
90002990:	687b      	ldr	r3, [r7, #4]
90002992:	681b      	ldr	r3, [r3, #0]
90002994:	685b      	ldr	r3, [r3, #4]
90002996:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
9000299a:	687b      	ldr	r3, [r7, #4]
9000299c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000299e:	687b      	ldr	r3, [r7, #4]
900029a0:	681b      	ldr	r3, [r3, #0]
900029a2:	430a      	orrs	r2, r1
900029a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
900029a6:	687b      	ldr	r3, [r7, #4]
900029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
900029ae:	2b00      	cmp	r3, #0
900029b0:	d00a      	beq.n	900029c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
900029b2:	687b      	ldr	r3, [r7, #4]
900029b4:	681b      	ldr	r3, [r3, #0]
900029b6:	685b      	ldr	r3, [r3, #4]
900029b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
900029bc:	687b      	ldr	r3, [r7, #4]
900029be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
900029c0:	687b      	ldr	r3, [r7, #4]
900029c2:	681b      	ldr	r3, [r3, #0]
900029c4:	430a      	orrs	r2, r1
900029c6:	605a      	str	r2, [r3, #4]
  }
}
900029c8:	bf00      	nop
900029ca:	370c      	adds	r7, #12
900029cc:	46bd      	mov	sp, r7
900029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
900029d2:	4770      	bx	lr

900029d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
900029d4:	b580      	push	{r7, lr}
900029d6:	b086      	sub	sp, #24
900029d8:	af02      	add	r7, sp, #8
900029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
900029dc:	687b      	ldr	r3, [r7, #4]
900029de:	2200      	movs	r2, #0
900029e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
900029e4:	f7fe fc3e 	bl	90001264 <HAL_GetTick>
900029e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
900029ea:	687b      	ldr	r3, [r7, #4]
900029ec:	681b      	ldr	r3, [r3, #0]
900029ee:	681b      	ldr	r3, [r3, #0]
900029f0:	f003 0308 	and.w	r3, r3, #8
900029f4:	2b08      	cmp	r3, #8
900029f6:	d10e      	bne.n	90002a16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
900029f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
900029fc:	9300      	str	r3, [sp, #0]
900029fe:	68fb      	ldr	r3, [r7, #12]
90002a00:	2200      	movs	r2, #0
90002a02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
90002a06:	6878      	ldr	r0, [r7, #4]
90002a08:	f000 f817 	bl	90002a3a <UART_WaitOnFlagUntilTimeout>
90002a0c:	4603      	mov	r3, r0
90002a0e:	2b00      	cmp	r3, #0
90002a10:	d001      	beq.n	90002a16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
90002a12:	2303      	movs	r3, #3
90002a14:	e00d      	b.n	90002a32 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
90002a16:	687b      	ldr	r3, [r7, #4]
90002a18:	2220      	movs	r2, #32
90002a1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
90002a1c:	687b      	ldr	r3, [r7, #4]
90002a1e:	2220      	movs	r2, #32
90002a20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
90002a22:	687b      	ldr	r3, [r7, #4]
90002a24:	2200      	movs	r2, #0
90002a26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
90002a28:	687b      	ldr	r3, [r7, #4]
90002a2a:	2200      	movs	r2, #0
90002a2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
90002a30:	2300      	movs	r3, #0
}
90002a32:	4618      	mov	r0, r3
90002a34:	3710      	adds	r7, #16
90002a36:	46bd      	mov	sp, r7
90002a38:	bd80      	pop	{r7, pc}

90002a3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
90002a3a:	b580      	push	{r7, lr}
90002a3c:	b084      	sub	sp, #16
90002a3e:	af00      	add	r7, sp, #0
90002a40:	60f8      	str	r0, [r7, #12]
90002a42:	60b9      	str	r1, [r7, #8]
90002a44:	603b      	str	r3, [r7, #0]
90002a46:	4613      	mov	r3, r2
90002a48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90002a4a:	e05e      	b.n	90002b0a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
90002a4c:	69bb      	ldr	r3, [r7, #24]
90002a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
90002a52:	d05a      	beq.n	90002b0a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90002a54:	f7fe fc06 	bl	90001264 <HAL_GetTick>
90002a58:	4602      	mov	r2, r0
90002a5a:	683b      	ldr	r3, [r7, #0]
90002a5c:	1ad3      	subs	r3, r2, r3
90002a5e:	69ba      	ldr	r2, [r7, #24]
90002a60:	429a      	cmp	r2, r3
90002a62:	d302      	bcc.n	90002a6a <UART_WaitOnFlagUntilTimeout+0x30>
90002a64:	69bb      	ldr	r3, [r7, #24]
90002a66:	2b00      	cmp	r3, #0
90002a68:	d11b      	bne.n	90002aa2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
90002a6a:	68fb      	ldr	r3, [r7, #12]
90002a6c:	681b      	ldr	r3, [r3, #0]
90002a6e:	681a      	ldr	r2, [r3, #0]
90002a70:	68fb      	ldr	r3, [r7, #12]
90002a72:	681b      	ldr	r3, [r3, #0]
90002a74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
90002a78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
90002a7a:	68fb      	ldr	r3, [r7, #12]
90002a7c:	681b      	ldr	r3, [r3, #0]
90002a7e:	689a      	ldr	r2, [r3, #8]
90002a80:	68fb      	ldr	r3, [r7, #12]
90002a82:	681b      	ldr	r3, [r3, #0]
90002a84:	f022 0201 	bic.w	r2, r2, #1
90002a88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
90002a8a:	68fb      	ldr	r3, [r7, #12]
90002a8c:	2220      	movs	r2, #32
90002a8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
90002a90:	68fb      	ldr	r3, [r7, #12]
90002a92:	2220      	movs	r2, #32
90002a94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
90002a96:	68fb      	ldr	r3, [r7, #12]
90002a98:	2200      	movs	r2, #0
90002a9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
90002a9e:	2303      	movs	r3, #3
90002aa0:	e043      	b.n	90002b2a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
90002aa2:	68fb      	ldr	r3, [r7, #12]
90002aa4:	681b      	ldr	r3, [r3, #0]
90002aa6:	681b      	ldr	r3, [r3, #0]
90002aa8:	f003 0304 	and.w	r3, r3, #4
90002aac:	2b00      	cmp	r3, #0
90002aae:	d02c      	beq.n	90002b0a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
90002ab0:	68fb      	ldr	r3, [r7, #12]
90002ab2:	681b      	ldr	r3, [r3, #0]
90002ab4:	69db      	ldr	r3, [r3, #28]
90002ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
90002aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90002abe:	d124      	bne.n	90002b0a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
90002ac0:	68fb      	ldr	r3, [r7, #12]
90002ac2:	681b      	ldr	r3, [r3, #0]
90002ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
90002ac8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
90002aca:	68fb      	ldr	r3, [r7, #12]
90002acc:	681b      	ldr	r3, [r3, #0]
90002ace:	681a      	ldr	r2, [r3, #0]
90002ad0:	68fb      	ldr	r3, [r7, #12]
90002ad2:	681b      	ldr	r3, [r3, #0]
90002ad4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
90002ad8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
90002ada:	68fb      	ldr	r3, [r7, #12]
90002adc:	681b      	ldr	r3, [r3, #0]
90002ade:	689a      	ldr	r2, [r3, #8]
90002ae0:	68fb      	ldr	r3, [r7, #12]
90002ae2:	681b      	ldr	r3, [r3, #0]
90002ae4:	f022 0201 	bic.w	r2, r2, #1
90002ae8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
90002aea:	68fb      	ldr	r3, [r7, #12]
90002aec:	2220      	movs	r2, #32
90002aee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
90002af0:	68fb      	ldr	r3, [r7, #12]
90002af2:	2220      	movs	r2, #32
90002af4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
90002af6:	68fb      	ldr	r3, [r7, #12]
90002af8:	2220      	movs	r2, #32
90002afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
90002afe:	68fb      	ldr	r3, [r7, #12]
90002b00:	2200      	movs	r2, #0
90002b02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
90002b06:	2303      	movs	r3, #3
90002b08:	e00f      	b.n	90002b2a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90002b0a:	68fb      	ldr	r3, [r7, #12]
90002b0c:	681b      	ldr	r3, [r3, #0]
90002b0e:	69da      	ldr	r2, [r3, #28]
90002b10:	68bb      	ldr	r3, [r7, #8]
90002b12:	4013      	ands	r3, r2
90002b14:	68ba      	ldr	r2, [r7, #8]
90002b16:	429a      	cmp	r2, r3
90002b18:	bf0c      	ite	eq
90002b1a:	2301      	moveq	r3, #1
90002b1c:	2300      	movne	r3, #0
90002b1e:	b2db      	uxtb	r3, r3
90002b20:	461a      	mov	r2, r3
90002b22:	79fb      	ldrb	r3, [r7, #7]
90002b24:	429a      	cmp	r2, r3
90002b26:	d091      	beq.n	90002a4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
90002b28:	2300      	movs	r3, #0
}
90002b2a:	4618      	mov	r0, r3
90002b2c:	3710      	adds	r7, #16
90002b2e:	46bd      	mov	sp, r7
90002b30:	bd80      	pop	{r7, pc}
	...

90002b34 <__libc_init_array>:
90002b34:	b570      	push	{r4, r5, r6, lr}
90002b36:	4d0d      	ldr	r5, [pc, #52]	; (90002b6c <__libc_init_array+0x38>)
90002b38:	4c0d      	ldr	r4, [pc, #52]	; (90002b70 <__libc_init_array+0x3c>)
90002b3a:	1b64      	subs	r4, r4, r5
90002b3c:	10a4      	asrs	r4, r4, #2
90002b3e:	2600      	movs	r6, #0
90002b40:	42a6      	cmp	r6, r4
90002b42:	d109      	bne.n	90002b58 <__libc_init_array+0x24>
90002b44:	4d0b      	ldr	r5, [pc, #44]	; (90002b74 <__libc_init_array+0x40>)
90002b46:	4c0c      	ldr	r4, [pc, #48]	; (90002b78 <__libc_init_array+0x44>)
90002b48:	f000 f820 	bl	90002b8c <_init>
90002b4c:	1b64      	subs	r4, r4, r5
90002b4e:	10a4      	asrs	r4, r4, #2
90002b50:	2600      	movs	r6, #0
90002b52:	42a6      	cmp	r6, r4
90002b54:	d105      	bne.n	90002b62 <__libc_init_array+0x2e>
90002b56:	bd70      	pop	{r4, r5, r6, pc}
90002b58:	f855 3b04 	ldr.w	r3, [r5], #4
90002b5c:	4798      	blx	r3
90002b5e:	3601      	adds	r6, #1
90002b60:	e7ee      	b.n	90002b40 <__libc_init_array+0xc>
90002b62:	f855 3b04 	ldr.w	r3, [r5], #4
90002b66:	4798      	blx	r3
90002b68:	3601      	adds	r6, #1
90002b6a:	e7f2      	b.n	90002b52 <__libc_init_array+0x1e>
90002b6c:	90002bd8 	.word	0x90002bd8
90002b70:	90002bd8 	.word	0x90002bd8
90002b74:	90002bd8 	.word	0x90002bd8
90002b78:	90002bdc 	.word	0x90002bdc

90002b7c <memset>:
90002b7c:	4402      	add	r2, r0
90002b7e:	4603      	mov	r3, r0
90002b80:	4293      	cmp	r3, r2
90002b82:	d100      	bne.n	90002b86 <memset+0xa>
90002b84:	4770      	bx	lr
90002b86:	f803 1b01 	strb.w	r1, [r3], #1
90002b8a:	e7f9      	b.n	90002b80 <memset+0x4>

90002b8c <_init>:
90002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90002b8e:	bf00      	nop
90002b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
90002b92:	bc08      	pop	{r3}
90002b94:	469e      	mov	lr, r3
90002b96:	4770      	bx	lr

90002b98 <_fini>:
90002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90002b9a:	bf00      	nop
90002b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
90002b9e:	bc08      	pop	{r3}
90002ba0:	469e      	mov	lr, r3
90002ba2:	4770      	bx	lr
